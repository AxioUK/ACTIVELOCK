// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (bd6a6a4b).
//
// c:\daves\sauce\activelock\activelock3 mfc\examples\mfcsample_vc 6.0\debug\ActiveLock3.4.tlh
//
// C++ source equivalent of Win32 type library C:\\windows\\system32\\ActiveLock3.4.dll
// compiler-generated file created 06/28/06 at 10:06:00 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace ActiveLock3 {

//
// Forward references and typedefs
//

struct __declspec(uuid("2ef7b19c-d241-43ed-9928-8b16328045bc"))
/* dual interface */ _IActiveLock;
struct /* coclass */ IActiveLock;
struct __declspec(uuid("30bbf148-8413-4b17-a7ce-486f9c2e3eee"))
/* dual interface */ _AlugenGlobals;
struct /* coclass */ AlugenGlobals;
struct __declspec(uuid("ec32c1d7-459d-426d-b09b-e224389e7762"))
/* dual interface */ _ProductLicense;
struct /* coclass */ ProductLicense;
struct __declspec(uuid("5f3f282c-30f8-4889-b5a3-94f6a18a3a49"))
/* dual interface */ _ActiveLockEventNotifier;
struct /* coclass */ ActiveLockEventNotifier;
struct __declspec(uuid("93db4fd5-6717-462e-9623-23644521c254"))
/* dual interface */ _Globals;
struct /* coclass */ Globals;
struct __declspec(uuid("80cd4e4c-26b9-495a-b88b-6f131ccff08c"))
/* dual interface */ _IALUGenerator;
struct /* coclass */ IALUGenerator;
struct __declspec(uuid("a5d86faa-4259-40ae-b4d1-0b0e1684605a"))
/* dual interface */ _ProductInfo;
struct /* coclass */ ProductInfo;
struct __declspec(uuid("548868e7-fa38-4c06-bbbf-5f3c2d062324"))
/* dispinterface */ __ActiveLockEventNotifier;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_IActiveLock, __uuidof(_IActiveLock));
_COM_SMARTPTR_TYPEDEF(_AlugenGlobals, __uuidof(_AlugenGlobals));
_COM_SMARTPTR_TYPEDEF(_ProductLicense, __uuidof(_ProductLicense));
_COM_SMARTPTR_TYPEDEF(_ActiveLockEventNotifier, __uuidof(_ActiveLockEventNotifier));
_COM_SMARTPTR_TYPEDEF(_Globals, __uuidof(_Globals));
_COM_SMARTPTR_TYPEDEF(_IALUGenerator, __uuidof(_IALUGenerator));
_COM_SMARTPTR_TYPEDEF(_ProductInfo, __uuidof(_ProductInfo));
_COM_SMARTPTR_TYPEDEF(__ActiveLockEventNotifier, __uuidof(IDispatch));

//
// Type library items
//

struct __declspec(uuid("2ef7b19c-d241-43ed-9928-8b16328045bc"))
_IActiveLock : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExpirationDate))
    _bstr_t ExpirationDate;
    __declspec(property(get=GetRegisteredUser))
    _bstr_t RegisteredUser;
    __declspec(property(get=GetRegisteredDate))
    _bstr_t RegisteredDate;
    __declspec(property(get=GetUsedDays))
    long UsedDays;
    __declspec(property(get=GetEventNotifier))
    _ActiveLockEventNotifierPtr EventNotifier;
    __declspec(property(put=PutAutoRegisterKeyPath))
    _bstr_t AutoRegisterKeyPath;
    __declspec(property(put=PutKeyStorePath))
    _bstr_t KeyStorePath;
    __declspec(property(put=PutKeyStoreType))
    enum LicStoreType KeyStoreType;
    __declspec(property(get=GetSoftwareVersion,put=PutSoftwareVersion))
    _bstr_t SoftwareVersion;
    __declspec(property(put=PutSoftwareCode))
    _bstr_t SoftwareCode;
    __declspec(property(get=GetSoftwarePassword,put=PutSoftwarePassword))
    _bstr_t SoftwarePassword;
    __declspec(property(get=GetSoftwareName,put=PutSoftwareName))
    _bstr_t SoftwareName;
    __declspec(property(get=GetUsedLockType))
    enum ALLockTypes UsedLockType;
    __declspec(property(get=GetTrialLength,put=PutTrialLength))
    long TrialLength;
    __declspec(property(get=GetTrialType,put=PutTrialType))
    enum ALTrialTypes TrialType;
    __declspec(property(get=GetTrialHideType,put=PutTrialHideType))
    enum ALTrialHideTypes TrialHideType;
    __declspec(property(get=GetLockType,put=PutLockType))
    enum ALLockTypes LockType;
    __declspec(property(get=GetRegisteredLevel))
    _bstr_t RegisteredLevel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetRegisteredLevel ( );
    void PutLockType (
        enum ALLockTypes _arg1 );
    void PutTrialHideType (
        enum ALTrialHideTypes _arg1 );
    void PutTrialType (
        enum ALTrialTypes _arg1 );
    void PutTrialLength (
        long _arg1 );
    enum ALLockTypes GetLockType ( );
    enum ALLockTypes GetUsedLockType ( );
    enum ALTrialHideTypes GetTrialHideType ( );
    enum ALTrialTypes GetTrialType ( );
    long GetTrialLength ( );
    void PutSoftwareName (
        _bstr_t _arg1 );
    void PutSoftwarePassword (
        _bstr_t _arg1 );
    _bstr_t GetSoftwareName ( );
    _bstr_t GetSoftwarePassword ( );
    void PutSoftwareCode (
        _bstr_t _arg1 );
    void PutSoftwareVersion (
        _bstr_t _arg1 );
    _bstr_t GetSoftwareVersion ( );
    void PutKeyStoreType (
        enum LicStoreType _arg1 );
    void PutKeyStorePath (
        _bstr_t _arg1 );
    _bstr_t GetInstallationCode (
        _bstr_t User,
        struct _ProductLicense * * Lic );
    void PutAutoRegisterKeyPath (
        _bstr_t _arg1 );
    _bstr_t LockCode (
        struct _ProductLicense * * Lic );
    HRESULT Register (
        _bstr_t LibKey );
    _bstr_t Transfer (
        _bstr_t InstallCode );
    HRESULT Init (
        BSTR * autoLicString );
    HRESULT Acquire (
        BSTR * strMsg );
    HRESULT ResetTrial ( );
    HRESULT KillTrial ( );
    _ActiveLockEventNotifierPtr GetEventNotifier ( );
    long GetUsedDays ( );
    _bstr_t GetRegisteredDate ( );
    _bstr_t GetRegisteredUser ( );
    _bstr_t GetExpirationDate ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_RegisteredLevel (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall put_LockType (
        enum ALLockTypes _arg1 ) = 0;
    virtual HRESULT __stdcall put_TrialHideType (
        enum ALTrialHideTypes _arg1 ) = 0;
    virtual HRESULT __stdcall put_TrialType (
        enum ALTrialTypes _arg1 ) = 0;
    virtual HRESULT __stdcall put_TrialLength (
        long _arg1 ) = 0;
    virtual HRESULT __stdcall get_LockType (
        enum ALLockTypes * _arg1 ) = 0;
    virtual HRESULT __stdcall get_UsedLockType (
        enum ALLockTypes * _arg1 ) = 0;
    virtual HRESULT __stdcall get_TrialHideType (
        enum ALTrialHideTypes * _arg1 ) = 0;
    virtual HRESULT __stdcall get_TrialType (
        enum ALTrialTypes * _arg1 ) = 0;
    virtual HRESULT __stdcall get_TrialLength (
        long * _arg1 ) = 0;
    virtual HRESULT __stdcall put_SoftwareName (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall put_SoftwarePassword (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_SoftwareName (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_SoftwarePassword (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall put_SoftwareCode (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall put_SoftwareVersion (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_SoftwareVersion (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall put_KeyStoreType (
        enum LicStoreType _arg1 ) = 0;
    virtual HRESULT __stdcall put_KeyStorePath (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_InstallationCode (
        BSTR User,
        struct _ProductLicense * * Lic,
        BSTR * _arg3 ) = 0;
    virtual HRESULT __stdcall put_AutoRegisterKeyPath (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall raw_LockCode (
        struct _ProductLicense * * Lic,
        BSTR * _arg2 ) = 0;
    virtual HRESULT __stdcall raw_Register (
        BSTR LibKey ) = 0;
    virtual HRESULT __stdcall raw_Transfer (
        BSTR InstallCode,
        BSTR * _arg2 ) = 0;
    virtual HRESULT __stdcall raw_Init (
        BSTR * autoLicString ) = 0;
    virtual HRESULT __stdcall raw_Acquire (
        BSTR * strMsg ) = 0;
    virtual HRESULT __stdcall raw_ResetTrial ( ) = 0;
    virtual HRESULT __stdcall raw_KillTrial ( ) = 0;
    virtual HRESULT __stdcall get_EventNotifier (
        struct _ActiveLockEventNotifier * * _arg1 ) = 0;
    virtual HRESULT __stdcall get_UsedDays (
        long * _arg1 ) = 0;
    virtual HRESULT __stdcall get_RegisteredDate (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_RegisteredUser (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_ExpirationDate (
        BSTR * _arg1 ) = 0;
};

struct __declspec(uuid("22cc9ba6-6480-4769-b133-c447ed084f64"))
IActiveLock;
    // [ default ] interface _IActiveLock

struct __declspec(uuid("30bbf148-8413-4b17-a7ce-486f9c2e3eee"))
_AlugenGlobals : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _IALUGeneratorPtr GeneratorInstance ( );
    _ProductInfoPtr CreateProductInfo (
        _bstr_t name,
        _bstr_t Ver,
        _bstr_t VCode,
        _bstr_t GCode );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GeneratorInstance (
        struct _IALUGenerator * * _arg1 ) = 0;
    virtual HRESULT __stdcall raw_CreateProductInfo (
        BSTR name,
        BSTR Ver,
        BSTR VCode,
        BSTR GCode,
        struct _ProductInfo * * _arg5 ) = 0;
};

struct __declspec(uuid("e602c27d-a3d6-4ff4-9648-7495bdf95878"))
AlugenGlobals;
    // [ default ] interface _AlugenGlobals

struct __declspec(uuid("ec32c1d7-459d-426d-b09b-e224389e7762"))
_ProductLicense : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHash1))
    _bstr_t Hash1;
    __declspec(property(get=GetLastUsed))
    _bstr_t LastUsed;
    __declspec(property(get=GetMaxCount))
    long MaxCount;
    __declspec(property(get=GetRegisteredDate))
    _bstr_t RegisteredDate;
    __declspec(property(get=GetExpiration))
    _bstr_t Expiration;
    __declspec(property(get=GetLicenseCode,put=PutLicenseCode))
    _bstr_t LicenseCode;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetLicensee,put=PutLicensee))
    _bstr_t Licensee;
    __declspec(property(get=GetLicenseClass))
    _bstr_t LicenseClass;
    __declspec(property(get=GetProductKey,put=PutProductKey))
    _bstr_t ProductKey;
    __declspec(property(get=GetProductVer))
    _bstr_t ProductVer;
    __declspec(property(get=GetProductName))
    _bstr_t ProductName;
    __declspec(property(get=GetRegisteredLevel,put=PutRegisteredLevel))
    _bstr_t RegisteredLevel;

    //
    // Wrapper methods for error-handling
    //

    void PutRegisteredLevel (
        _bstr_t _arg1 );
    _bstr_t GetRegisteredLevel ( );
    void PutLicenseType (
        enum ALLicType * _arg1 );
    enum ALLicType GetLicenseType ( );
    _bstr_t GetProductName ( );
    _bstr_t GetProductVer ( );
    void PutProductKey (
        _bstr_t _arg1 );
    _bstr_t GetProductKey ( );
    _bstr_t GetLicenseClass ( );
    void PutLicensee (
        _bstr_t _arg1 );
    _bstr_t GetLicensee ( );
    void PutLicenseKey (
        _bstr_t _arg1 );
    void PutLicenseCode (
        _bstr_t _arg1 );
    _bstr_t GetLicenseKey ( );
    _bstr_t GetLicenseCode ( );
    _bstr_t GetExpiration ( );
    _bstr_t GetRegisteredDate ( );
    long GetMaxCount ( );
    _bstr_t GetLastUsed ( );
    _bstr_t GetHash1 ( );
    _bstr_t ToString ( );
    HRESULT Load (
        _bstr_t strLic );
    HRESULT Save (
        BSTR * strOut );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_RegisteredLevel (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_RegisteredLevel (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall put_LicenseType (
        enum ALLicType * _arg1 ) = 0;
    virtual HRESULT __stdcall get_LicenseType (
        enum ALLicType * _arg1 ) = 0;
    virtual HRESULT __stdcall get_ProductName (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_ProductVer (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall put_ProductKey (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_ProductKey (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_LicenseClass (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall put_Licensee (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_Licensee (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall put_LicenseKey (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall put_LicenseCode (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_LicenseKey (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_LicenseCode (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_Expiration (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_RegisteredDate (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_MaxCount (
        long * _arg1 ) = 0;
    virtual HRESULT __stdcall get_LastUsed (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_Hash1 (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall raw_ToString (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall raw_Load (
        BSTR strLic ) = 0;
    virtual HRESULT __stdcall raw_Save (
        BSTR * strOut ) = 0;
};

struct __declspec(uuid("8ea407ba-62a8-43bf-be80-86887a4539a0"))
ProductLicense;
    // [ default ] interface _ProductLicense

struct __declspec(uuid("5f3f282c-30f8-4889-b5a3-94f6a18a3a49"))
_ActiveLockEventNotifier : IDispatch
{};

struct __declspec(uuid("04e4417b-370e-47df-b922-4e3dfc64c8a2"))
ActiveLockEventNotifier;
    // [ default ] interface _ActiveLockEventNotifier
    // [ default, source ] dispinterface __ActiveLockEventNotifier

struct __declspec(uuid("93db4fd5-6717-462e-9623-23644521c254"))
_Globals : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _IActiveLockPtr NewInstance ( );
    _ProductLicensePtr CreateProductLicense (
        _bstr_t name,
        _bstr_t Ver,
        _bstr_t Code,
        enum LicFlags Flags,
        enum ALLicType LicType,
        _bstr_t Licensee,
        _bstr_t RegisteredLevel,
        _bstr_t Expiration,
        _bstr_t LicKey,
        _bstr_t RegisteredDate,
        _bstr_t Hash1,
        short MaxUsers,
        _bstr_t LicCode );
    _bstr_t TrimNulls (
        _bstr_t str );
    _bstr_t MD5Hash (
        _bstr_t str );
    _bstr_t Base64Encode (
        _bstr_t str );
    _bstr_t Base64Decode (
        _bstr_t strEncoded );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_NewInstance (
        struct _IActiveLock * * _arg1 ) = 0;
    virtual HRESULT __stdcall raw_CreateProductLicense (
        BSTR name,
        BSTR Ver,
        BSTR Code,
        enum LicFlags Flags,
        enum ALLicType LicType,
        BSTR Licensee,
        BSTR RegisteredLevel,
        BSTR Expiration,
        BSTR LicKey,
        BSTR RegisteredDate,
        BSTR Hash1,
        short MaxUsers,
        BSTR LicCode,
        struct _ProductLicense * * _arg14 ) = 0;
    virtual HRESULT __stdcall raw_TrimNulls (
        BSTR str,
        BSTR * _arg2 ) = 0;
    virtual HRESULT __stdcall raw_MD5Hash (
        BSTR str,
        BSTR * _arg2 ) = 0;
    virtual HRESULT __stdcall raw_Base64Encode (
        BSTR str,
        BSTR * _arg2 ) = 0;
    virtual HRESULT __stdcall raw_Base64Decode (
        BSTR strEncoded,
        BSTR * _arg2 ) = 0;
};

struct __declspec(uuid("49763ecd-2de1-42c8-ab57-3fb381a65d33"))
Globals;
    // [ default ] interface _Globals

struct __declspec(uuid("80cd4e4c-26b9-495a-b88b-6f131ccff08c"))
_IALUGenerator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutStoragePath))
    _bstr_t StoragePath;

    //
    // Wrapper methods for error-handling
    //

    void PutStoragePath (
        _bstr_t _arg1 );
    HRESULT SaveProduct (
        struct _ProductInfo * * ProdInfo );
    _ProductInfoPtr RetrieveProduct (
        _bstr_t name,
        _bstr_t Ver );
    SAFEARRAY * RetrieveProducts ( );
    HRESULT DeleteProduct (
        _bstr_t name,
        _bstr_t Ver );
    _bstr_t GenKey (
        struct _ProductLicense * * Lic,
        _bstr_t InstCode,
        _bstr_t RegisteredLevel );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_StoragePath (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall raw_SaveProduct (
        struct _ProductInfo * * ProdInfo ) = 0;
    virtual HRESULT __stdcall raw_RetrieveProduct (
        BSTR name,
        BSTR Ver,
        struct _ProductInfo * * _arg3 ) = 0;
    virtual HRESULT __stdcall raw_RetrieveProducts (
        SAFEARRAY * * _arg1 ) = 0;
    virtual HRESULT __stdcall raw_DeleteProduct (
        BSTR name,
        BSTR Ver ) = 0;
    virtual HRESULT __stdcall raw_GenKey (
        struct _ProductLicense * * Lic,
        BSTR InstCode,
        BSTR RegisteredLevel,
        BSTR * _arg4 ) = 0;
};

struct __declspec(uuid("a04c7563-cafe-4b6c-a60f-dac256a210d5"))
IALUGenerator;
    // [ default ] interface _IALUGenerator

struct __declspec(uuid("a5d86faa-4259-40ae-b4d1-0b0e1684605a"))
_ProductInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGCode))
    _bstr_t GCode;
    __declspec(property(get=GetVCode))
    _bstr_t VCode;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=Getname))
    _bstr_t name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getname ( );
    _bstr_t GetVersion ( );
    _bstr_t GetVCode ( );
    _bstr_t GetGCode ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_name (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_Version (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_VCode (
        BSTR * _arg1 ) = 0;
    virtual HRESULT __stdcall get_GCode (
        BSTR * _arg1 ) = 0;
};

struct __declspec(uuid("a2ddc800-4fad-4cd6-af50-e3731214a294"))
ProductInfo;
    // [ default ] interface _ProductInfo

struct __declspec(uuid("548868e7-fa38-4c06-bbbf-5f3c2d062324"))
__ActiveLockEventNotifier : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT ValidateValue (
        BSTR * Value );
};

enum ALLockTypes
{
    lockNone = 0,
    lockWindows = 1,
    lockComp = 2,
    lockHD = 4,
    lockMAC = 8,
    lockBIOS = 16,
    lockIP = 32,
    lockMotherboard = 64,
    lockHDFirmware = 256
};

enum LicStoreType
{
    alsRegistry = 0,
    alsFile = 1
};

enum ALTrialTypes
{
    trialNone = 0,
    trialDays = 1,
    trialRuns = 2
};

enum ALTrialHideTypes
{
    trialSteganography = 1,
    trialHiddenFolder = 2,
    trialRegistry = 4
};

enum ALUGENErrCodeConstants
{
    alugenOK = 0,
    alugenProdInvalid = -2147221248
};

enum LicFlags
{
    alfSingle = 0,
    alfMulti = 1
};

enum ALLicType
{
    allicNone = 0,
    allicPeriodic = 1,
    allicPermanent = 2,
    allicTimeLocked = 3
};

enum ActiveLockErrCodeConstants
{
    alerrOK = 0,
    alerrNoLicense = -2147221503,
    alerrLicenseInvalid = -2147221502,
    alerrLicenseExpired = -2147221501,
    alerrLicenseTampered = -2147221500,
    alerrClockChanged = -2147221499,
    alerrKeyStoreInvalid = -2147221488,
    alerrFileTampered = -2147221487,
    alerrNotInitialized = -2147221486,
    alerrNotImplemented = -2147221485,
    alerrUserNameTooLong = -2147221484,
    alerrInvalidTrialDays = -2147221472,
    alerrInvalidTrialRuns = -2147221471,
    alerrTrialInvalid = -2147221470,
    alerrTrialDaysExpired = -2147221469,
    alerrTrialRunsExpired = -2147221468,
    alerrNoSoftwareName = -2147221467,
    alerrNoSoftwareVersion = -2147221466,
    alerrRSAError = -2147221465
};

//
// Wrapper method implementations
//

#include "c:\daves\sauce\activelock\activelock3 mfc\examples\mfcsample_vc 6.0\debug\ActiveLock3.4.tli"

} // namespace ActiveLock3

#pragma pack(pop)
