<?xml version="1.0"?>
<doc>
<assembly>
<name>
ActiveLock37Net
</name>
</assembly>
<members>
<member name="M:ActiveLock37Net.clsShortSerial.GenerateKey(System.String@,System.String@)">
	<summary>
 Generates a short serial number by taking the app name, adding the app version
 number and the app password, creating an MD5 digest, and using the digest to select 
 the 8 characters for our serial.
 </summary>
	<param name="sAppNameVersionPassword">String - Application specific composite string</param>
	<param name="sHDDfirmwareSerial">String - HDD firmware serial number</param>
	<returns>String - The key</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.clsShortSerial.IsKeyOK(System.String@,System.String@,System.String@)">
	<summary>
 Takes the key, recalculates the MD5 part and tests for equality.
 </summary>
	<param name="sKey">String - Key to check</param>
	<param name="sAppNameVersionPassword"></param>
	<param name="sHDDfirmwareSerial"></param>
	<returns>Boolean - True if valid</returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net._IActiveLock">
	<summary>
 _IActiveLock - Interface - Implimented by IActiveLock
 </summary>
	<remarks>
		<para> - MaintainedBy:</para>
		<para> - LastRevisionDate:</para>
		<para> - Comments:</para></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockNone">
	<summary>No locking - not recommended</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockMAC">
	<summary>
 Lock to Network Interface Card Address
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockComp">
	<summary>
 Lock to Computer Name
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockHD">
	<summary>
 Lock to Hard Drive Serial Number (Volume Serial Number)
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockHDFirmware">
	<summary>
 Lock to Hard Disk Firmware Serial (HDD Manufacturer's Serial Number)
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockWindows">
	<summary>
 Lock to Windows Serial Number
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockBIOS">
	<summary>
 Lock to BIOS Serial Number
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockMotherboard">
	<summary>
 Lock to Motherboard Serial Number
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockIP">
	<summary>
 Lock to Computer Local IP Address
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockExternalIP">
	<summary>
 Lock to External IP Address
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockFingerprint">
	<summary>
 Lock to Fingerprint (Activelock Combination)
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockMemory">
	<summary>
 Lock to Memory ID
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockCPUID">
	<summary>
 Lock to CPU ID
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockBaseboardID">
	<summary>
 Lock to Baseboard Name and Serial Number
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLockTypes.lockvideoID">
	<summary>
 Lock to Video Controller Name and Drive Version Number
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ALLockTypes">
	<summary>
 License Lock Types.
 </summary>
	<remarks>Values can be combined (OR ed) together.</remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLicenseKeyTypes.alsRSA">
	<summary>
 RSA Keys from .NET Classes
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLicenseKeyTypes.alsShortKeyMD5">
	<summary>
 Short license keys by MD5
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ALLicenseKeyTypes">
	<summary>
 License Key Type specifies the length/type
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.LicStoreType.alsRegistry">
	<summary>
 Store in Windows Registry
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.LicStoreType.alsFile">
	<summary>
 Store in a license file
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.LicStoreType">
	<summary>
 License Store Type specifies where to store license keys
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ProductsStoreType.alsINIFile">
	<summary>
 Store in INI file (licenses.ini)
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ProductsStoreType.alsXMLFile">
	<summary>
 Store in XML file (licenses.xml)
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ProductsStoreType.alsMDBFile">
	<summary>
 Store in MDB file (licenses.mdb)
 </summary>
	<remarks>mdb file should contain a table named products with structure: ID(autonumber), name(text,150), version (text,50), vccode(memo), gcode(memo)</remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ProductsStoreType">
	<summary>
 Products Store Type specifies where to store products infos
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTrialTypes.trialNone">
	<summary>
 No trial used
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTrialTypes.trialDays">
	<summary>
 Trial by Days
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTrialTypes.trialRuns">
	<summary>
 Trial by Runs
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ALTrialTypes">
	<summary>
 Trial Type specifies what kind of Trial Feature is used
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTrialHideTypes.trialSteganography">
	<summary>
 Trial information is hidden in BMP files
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTrialHideTypes.trialHiddenFolder">
	<summary>
 Trial information is hidden in a folder which uses a default namespace
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTrialHideTypes.trialRegistryPerUser">
	<summary>
 Trial information is encrypted and hidden in registry (per user)
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTrialHideTypes.trialIsolatedStorage">
	<summary>
 Not documented! Please Update!
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ALTrialHideTypes">
	<summary>
 Trial Hide Mode Type specifies what kind of Trial Hiding Mode is used
 </summary>
	<remarks>Values can be combined (OR'ed) together.</remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTimeServerTypes.alsDontCheckTimeServer">
	<summary>
 Skips checking a Time Server
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTimeServerTypes.alsCheckTimeServer">
	<summary>
 Checks a Time Server
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ALTimeServerTypes">
	<summary>
 Enum for accessing the Time Server to check Clock Tampering
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALSystemFilesTypes.alsDontCheckSystemFiles">
	<summary>
 Skips checking system files
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALSystemFilesTypes.alsCheckSystemFiles">
	<summary>
 Checks system files
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ALSystemFilesTypes">
	<summary>
 Enum for scanning the system folders/files to detect clock tampering
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLicenseFileTypes.alsLicenseFilePlain">
	<summary>
 Encrypts the license file
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALLicenseFileTypes.alsLicenseFileEncrypted">
	<summary>
 Leaves the license file readable
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ALLicenseFileTypes">
	<summary>
 Enum for license file encryption
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALAutoRegisterTypes.alsEnableAutoRegistration">
	<summary>
 Enables auto license registration
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALAutoRegisterTypes.alsDisableAutoRegistration">
	<summary>
 Disables auto license registration
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ALAutoRegisterTypes">
	<summary>
 Enum for Auto Registeration via ALL files
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTrialWarningTypes.trialWarningTemporary">
	<summary>
 Trial Warning is Temporary (1-time only)
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IActiveLock.ALTrialWarningTypes.trialWarningPersistent">
	<summary>
 Trial Warning is Persistent
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock.ALTrialWarningTypes">
	<summary>
 Trial Warning can be persistent or temporary
 </summary>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.RemainingTrialDays">
	<summary>
 RemainingTrialDays - Read Only - Returns the Number of Used Trial Days.
 </summary>
	<value></value>
	<returns>Integer - Number of Used Trial Days</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.RemainingTrialRuns">
	<summary>
 RemainingTrialRuns - Read Only - Returns the Number of Used Trial Runs.
 </summary>
	<value></value>
	<returns>Integer - Number of Used Trial Runs</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.RegisteredLevel">
	<summary>
 RegisteredLevel - Read Only - Returns the registered level.
 </summary>
	<value></value>
	<returns>String - Registered level</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.MaxCount">
	<summary>
 MaxCount - Read Only - Returns the Number of concurrent users for the networked license
 </summary>
	<value></value>
	<returns>Integer - Number of concurrent users for the networked license</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.LicenseClass">
	<summary>
 LicenseClass - Read Only - Returns the LicenseClass
 </summary>
	<value></value>
	<returns>String - LicenseClass</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.InstallationCode(System.String,ActiveLock37Net.ProductLicense)">
	<summary>
 InstallationCode - Read Only - Returns the installation-specific code needed to obtain the liberation key.
 </summary>
	<param name="User">Optional - String - User</param>
	<param name="Lic">Optional - ProductLicense - License</param>
	<value>ByVal User As String - Optionally tailors the installation code specific to this user.</value>
	<returns>String - Installation Code</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.EventNotifier">
	<summary>
 EventNotifier - Read Only - Retrieves the event notifier.
 </summary>
	<value></value>
	<returns>ActiveLockEventNotifier - An object that can be used as a COM event source. i.e. can be used in <code>WithEvents</code> statements in VB.</returns>
	<remarks>
 Client applications uses this Notifier to handle event notifications sent by ActiveLock,
 including license property validation and encryption events.
 </remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.UsedDays">
	<summary>
 UsedDays - Read Only - Returns the number of days this product has been used since its registration.
 </summary>
	<value></value>
	<returns>Long - Used days for the license</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.RegisteredDate">
	<summary>
 RegisteredDate - Read Only - Retrieves the registration date.
 </summary>
	<value></value>
	<returns>String - Date on which the product is registered.</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.RegisteredUser">
	<summary>
 RegisteredUser - Read Only - Returns the registered user.
 </summary>
	<value></value>
	<returns>String - Registered user name</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.ExpirationDate">
	<summary>
 ExpirationDate - Read Only - Retrieves the expiration date.
 </summary>
	<value></value>
	<returns>String - Date on which the license will expire.</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.LicenseKeyType">
	<summary>
 LicenseKeyType - Write Only - Interface Property. Specifies the license key type for this instance of ActiveLock.
 </summary>
	<value>ByVal LicenseKeyTypes As ALLicenseKeyType - License Key Types object</value>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.CheckTimeServerForClockTampering">
	<summary>
 CheckTimeServerForClockTampering - Write Only - Specifies whether a Time Server should be used to check Clock Tampering
 </summary>
	<value>ByVal Value As ALTimeServerTypes - Flag to use a Time Server or not</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.CheckSystemFilesForClockTampering">
	<summary>
 CheckSystemFilesForClockTampering - Write Only - Specifies whether the system files should be checked for Clock Tampering
 </summary>
	<value>ByVal Value As ALSystemFilesTypes - Flag to check system files or not</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.AutoRegister">
	<summary>
 AutoRegister - Write Only - Specifies whether the auto register mechanism via an ALL file should be enabled or disabled
 </summary>
	<value>ByVal Value As ALAutoRegisterTypes - Flag to auto register a license or not</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.TrialWarning">
	<summary>
 TrialWarning - Write Only - Specifies whether the Trial Warning is either Persistent or Temporary
 </summary>
	<value>ByVal Value As ALTrialWarningTypes - Trial Warning is either Persistent or Temporary</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.SoftwareCode">
	<summary>
 SoftwareCode - Write Only - Specifies the software code (product code)
 </summary>
	<value>ByVal sCode As String - Software Code</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.KeyStoreType">
	<summary>
 KeyStoreType - Write Only - Specifies the key store type.
 </summary>
	<value>ByVal KeyStore As LicStoreType - Key store type</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.KeyStorePath">
	<summary>
 KeyStorePath - Write Only - Specifies the key store path.
 </summary>
	<value>ByVal sPath As String - The path to be used for the specified KeyStoreType.</value>
	<remarks>
		<para>@param sPath - The path to be used for the specified KeyStoreType.</para>
		<para>e.g. If <a href="IActiveLock.LicStoreType.html">alsFile</a> is used for <a href="IActiveLock.Let.KeyStoreType.html">KeyStoreType</a>,</para>
		<para>then <code>Path</code> specifies the path to the license file.</para>
		<para>If <a href="IActiveLock.LicStoreType.html">alsRegistry</a> is used,</para>
		<para>the Path specifies the Registry hive where license information is stored.</para>
	</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.AutoRegisterKeyPath">
	<summary>
 AutoRegisterKeyPath - Write Only - Specifies the file path that contains the liberation key.
 </summary>
	<value>ByVal sPath As String - Full path to where the liberation file may reside.</value>
	<remarks>
		<para>If this file exists, ActiveLock will attempt to register the key automatically during its initialization.</para>
		<para>Upon successful registration, the liberation file WILL be deleted.</para>
		<para><b>Note</b>: This property is only effective if it is set prior to calling <code>Init</code>.</para>
	</remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.LockType">
	<summary>
 LockType - Read/Write - Returns the Lock Type being used in this instance.
 </summary>
	<value>See TODO:</value>
	<returns>ALLockTypes - lock type object corresponding to the lock type(s) being used</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.TrialHideType">
	<summary>
 TrialHideType - Read/Write - Returns the Trial Hide Type being used in this instance.
 </summary>
	<value></value>
	<returns>ALTrialHideTypes - trial hide type object corresponding to the trial hide type(s) being used</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.TrialType">
	<summary>
 TrialType - Read/Write - Returns the Trial Type being used in this instance.
 </summary>
	<value></value>
	<returns>ALTrialTypes - Trial Type (TrialNone, TrialByDays, TrialByRuns)</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.TrialLength">
	<summary>
 TrialLength - Read/Write - Returns the Trial Length being used in this instance.
 </summary>
	<value></value>
	<returns>Integer - Trial Length (Number of Days or Runs)</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.SoftwareName">
	<summary>
 SoftwareName - Read/Write - Returns the Software Name being used in this instance.
 </summary>
	<value></value>
	<returns>String - Software Name</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.SoftwarePassword">
	<summary>
 SoftwarePassword - Read/Write - Returns the Software Password being used in this instance.
 </summary>
	<value></value>
	<returns>String - Software Password</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.LicenseFileType">
	<summary>
 LicenseFileType - Read/Write - Specifies whether the system files should be checked for Clock Tampering
 </summary>
	<value>ByVal Value As ALLicenseFileTypes - Encrypt License File or Leave it Plain</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IActiveLock.SoftwareVersion">
	<summary>
 SoftwareVersion - Read/Write - Returns the Software Version being used in this instance.
 </summary>
	<value></value>
	<returns>String - Software Version</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.LockCode(ActiveLock37Net.ProductLicense@)">
	<summary>
		<para>LockCode - Interface Method. Computes a lock code corresponding to the specified Lock Types, License Class, etc.</para>
		<para>Optionally, if a product license is specified, then a lock string specific to that license is returned.</para>
	</summary>
	<param name="Lic">Optional - ByRef Lic As ProductLicense - Product License for which to compute the lock code.</param>
	<returns>String - Lock code</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.Transfer(System.String)">
	<summary>
 Transfer - Not Implimented? - Transfers the current license to another computer.
 </summary>
	<param name="InstallCode">ByVal InstallCode As String - Installation Code generated from the other computer.</param>
	<returns>String - The liberation key tailored for the request code generated from the other machine.</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.GenerateShortSerial(System.String)">
	<summary>
 GenerateShortSerial ? Undocumented...
 </summary>
	<param name="HDDfirmwareSerial"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.GenerateShortKey(System.String,System.String,System.String,System.String,ActiveLock37Net.ProductLicense.ALLicType,System.Int32,System.Int16)">
	<summary>
 GenerateShortKey ? Undocumented...
 </summary>
	<param name="SoftwareCode"></param>
	<param name="SerialNumber"></param>
	<param name="LicenseeAndRegisteredLevel"></param>
	<param name="Expiration"></param>
	<param name="LicType"></param>
	<param name="RegisteredLevel"></param>
	<param name="MaxUsers"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.Register(System.String,System.String@)">
	<summary>
 Register - Registers the product using the specified liberation key.
 </summary>
	<param name="LibKey">ByVal LibKey As String - Liberation key</param>
	<param name="user">Optional - String - User</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.KillLicense(System.String,System.String)">
	<summary>
 KillLicense - Kills the specified license.
 </summary>
	<param name="SoftwareNameAndVersion">ByVal SoftwareNameAndVersion As String - Software Name And Version</param>
	<param name="LicPath">Optional - String - License file name and path</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.Init(System.String,System.String@)">
	<summary>
 Init - Purpose: Initializes ActiveLock before use. Some of the routines, including <a href="IActiveLock.Acquire.html">Acquire()</a> and <a href="IActiveLock.Register.html">Register()</a> requires <code>Init()</code> to be called first.
 </summary>
	<param name="strPath">Optional - ?Undocumented!</param>
	<param name="autoLicString">Optional - autoLicString As String - license key if autoregister is successful</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.Acquire(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
	<summary>
		<para>Acquires a valid license token.</para>
		<para>If no valid license can be found, an appropriate error will be raised, specifying the cause.</para>
	</summary>
	<param name="strMsg">Optional - ByRef strMsg As String - String returned by Activelock</param>
	<param name="strRemainingTrialDays">Optional - ?Undocumented!</param>
	<param name="strRemainingTrialRuns">Optional - ?Undocumented!</param>
	<param name="strTrialLength">Optional - ?Undocumented!</param>
	<param name="strUsedDays">Optional - ?Undocumented!</param>
	<param name="strExpirationDate">Optional - ?Undocumented!</param>
	<param name="strRegisteredUser">Optional - ?Undocumented!</param>
	<param name="strRegisteredLevel">Optional - ?Undocumented!</param>
	<param name="strLicenseClass">Optional - ?Undocumented!</param>
	<param name="strMaxCount">Optional - ?Undocumented!</param>
	<param name="strLicenseFileType">Optional - ?Undocumented!</param>
	<param name="strLicenseType">Optional - ?Undocumented!</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.ResetTrial">
	<summary>
 ResetTrial - Resets the Trial Mode
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IActiveLock.KillTrial">
	<summary>
 KillTrial - Kills the Trial Mode
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IActiveLock">
	<summary>
 IActiveLock - Impliments _IActiveLock
 </summary>
	<remarks>Class instancing was changed to public.</remarks>
</member><member name="E:ActiveLock37Net.ActiveLockEventNotifier.ValidateValue">
	<summary>
		<para>(Optional) Product License Property Value validation event allows the client application to return the encrypted version of a license property value (such as LastRunDate).</para>
		<para></para>
	</summary>
	<param name="Value"></param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLockEventNotifier.Notify(System.String,System.String@)">
	<summary>
 Handles ActiveLock COM event notifications to the interested observers
 </summary>
	<param name="EventName">String - Event name</param>
	<param name="Args">Variant - Parametric array arguments</param>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.ActiveLockEventNotifier">
	<summary>
		<para>This class handles ActiveLock COM event notifications to the interested observers.</para>
		<para>It is simply a wrapper containing public events.</para>
		<para>These events should really belong in IActiveLock, but since VB doesn't support inheritance of events, we have to do it this way.</para>
	</summary>
	<remarks>Class instancing was changed to public</remarks>
</member><member name="M:ActiveLock37Net.modTrial.lstrlen(System.String)">
	<summary>
 This function returns the length in bytes (ANSI version) or WCHAR values (Unicode version) of the specified string (not including the terminating null character).
 </summary>
	<param name="lpString">[in] Pointer to a null-terminated string.</param>
	<returns>The return value specifies the length of the string, in TCHAR values. This refers to bytes for ANSI versions of the function or WCHAR values for Unicode versions. If lpString is NULL, the return value is 0.</returns>
	<remarks>For security warning see http://msdn.microsoft.com/en-us/library/ms647492(VS.85).aspx </remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.lngFileAttributes">
	<summary>
 File attributes
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.ftCreationTime">
	<summary>
 Creation time
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.ftLastAccessTime">
	<summary>
 Last access time
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.ftLastWriteTime">
	<summary>
 Last modified time
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.lngFileSizeHigh">
	<summary>
 Size (high word)
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.lngFileSizeLow">
	<summary>
 Size (low word)
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.lngReserved0">
	<summary>
 reserved
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.lngReserved1">
	<summary>
 reserved
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.strFilename">
	<summary>
 File name
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modTrial.WIN32_FIND_DATA.strAlternate">
	<summary>
 8.3 name
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modTrial.DateToDblString(System.DateTime@)">
* <summary>
* converts a date to a double and then to a string
* useful for ensureing dates can be read when pulled back out
* no matter the locale
* </summary>
* <param name="Dte">the date to convert</param>
* <returns>a double number in a string</returns>
* <remarks>can blow up if passed an invalid date?</remarks>
</member><member name="M:ActiveLock37Net.modTrial.DblStringToDate(System.String@)">
* <summary>
* Function is used to convert doubles stored in strings to dates
* useful because whenever we store dates we convert them (to doubles and then strings)
* in case the user changes the locale in between storage and retrieval.
* minor handling of actual date strings for some semblance of backward 
* compatibility
* </summary>
* <param name="Dstr">The string to pass</param>
* <returns>a date representation on the passed Dstr or
*  1/1/1900 if a conversion error occurred</returns>
* <remarks></remarks>
</member><member name="T:ActiveLock37Net.modTrial">
	<summary>
 This module is used by the Trial Period/Runs feature
 </summary>
	<remarks>Documentation in progress...</remarks>
</member><member name="F:ActiveLock37Net.AlugenGlobals.alugenErrCodeConstants.alugenOk">
	<summary>
 No error.  Operation was successful.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.AlugenGlobals.alugenErrCodeConstants.alugenProdInvalid">
	<summary>
 Product Info is invalid
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.AlugenGlobals.alugenErrCodeConstants">
	<summary>
		<para>ActiveLock Error Codes.</para>
		<para>These error codes are used for <code>Err.Number</code> whenever ActiveLock raises an error</para>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.AlugenGlobals.GeneratorInstance(ActiveLock37Net.IActiveLock.ProductsStoreType)">
	<summary>
 Returns a new Generator instance
 </summary>
	<param name="pProductStorageType">IActiveLock.ProductsStoreType - Storage Type!</param>
	<returns>IALUGenerator - New Generator instance</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.AlugenGlobals.CreateProductInfo(System.String,System.String,System.String,System.String)">
	<summary>
 Instantiates a new ProductInfo object
 </summary>
	<param name="Name">String - Product name</param>
	<param name="Ver">String - Product version</param>
	<param name="VCode">String - Product VCODE (public key)</param>
	<param name="GCode">String - Product GCODE (private key)</param>
	<returns>ProductInfo - Product information</returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.AlugenGlobals">
	<summary>
 Global Accessors to ALUGENLib
 </summary>
	<remarks>Class instancing was changed to public.</remarks>
</member><member name="T:ActiveLock37Net.clsShortLicenseKey.Segments">
	<summary>
 segments to the license key
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.clsShortLicenseKey.MapFileChecksumErrors.CHECKSUM_OPEN_FAILURE">
	<summary>
 Could not open the file.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.clsShortLicenseKey.MapFileChecksumErrors.CHECKSUM_MAP_FAILURE">
	<summary>
 Could not map the file.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.clsShortLicenseKey.MapFileChecksumErrors.CHECKSUM_MAPVIEW_FAILURE">
	<summary>
 Could not map a view of the file.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.clsShortLicenseKey.MapFileChecksumErrors.CHECKSUM_UNICODE_FAILURE">
	<summary>
 Could not convert the file name to Unicode.
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.clsShortLicenseKey.MapFileChecksumErrors">
	<summary>
 Undocumented!
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.CopyMemory(System.Int32,System.Int32,System.Int32)">
	<summary>
 Copies a block of memory from one location to another.
 </summary>
	<param name="lpDest">A pointer to the starting address of the copied block's destination.</param>
	<param name="lpSource">A pointer to the starting address of the block of memory to copy.</param>
	<param name="nBytes">The size of the block of memory to copy, in bytes.</param>
	<remarks>This function is defined as the RtlCopyMemory function. Its implementation is
 provided inline. For more information, see Winbase.h and Winnt.h.
 If the source and destination blocks overlap, the results are undefined. For overlapped
 blocks, use the MoveMemory function</remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.MapFileAndCheckSumA(System.String,System.Int32@,System.Int32@)">
	<summary>
 Computes the checksum of the specified file.
 </summary>
	<param name="FileName">The file name of the file for which the checksum is to be computed.</param>
	<param name="HeaderSum">A pointer to a variable that receives the original checksum from the image file, or zero if there is an error</param>
	<param name="CheckSum">A pointer to a variable that receives the computed checksum</param>
	<returns>
 If the function succeeds, the return value is CHECKSUM_SUCCESS (0).
 </returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms680355(VS.85).aspx for more information.</remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.CreateShortKey(System.String,System.String,System.Int32,System.DateTime,System.Int16,System.Int32)">
	<summary>
 Creates a new serial number.
 </summary>
	<param name="SerialNumber">The serial number is generated from the app name,
 version, and password, along with the HDD firmware serial number, which makes
 it unique for the machine running the app.</param>
	<param name="Licensee">Name of party to whom this license is issued.</param>
	<param name="ProductCode">A unique number assigned to this product. This is
 created from the app private key and is a 4 digit integer.</param>
	<param name="ExpireDate">Use this field for time-based serial numbers. This allows 
 serial number to be issued that expire in two weeks or at the end of the year.</param>
	<param name="UserData">This field is caller defined. Currently we are using
 the MaxUser and LicType (using a LoByte/HiByte packed field).</param>
	<param name="RegisteredLevel">This is the Registered Level from Alugen. Long only.</param>
	<returns>A License Key in the form of "233C-3912-00FF-BE49"</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.TestKey(System.String,System.String)">
	<summary>
 Performs a simple CRC test to ensure the key was entered "correctly". Does NOT
 validate that the key is VALID. This function allows the caller to "test" the
 key input by the user, without having to execute the key validation code,
 making it more work for a cracker to generate a key for your application.
 </summary>
	<param name="LicenseKey"></param>
	<param name="Licensee"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.ValidateShortKey(System.String,System.String,System.String,System.Int32,System.DateTime@,System.Int16@,System.Int32@)">
	<summary>
 Evaluates the supplied license key and tests that it is valid. We do this by recomputing the checksum and comparing it to the one embedded in the serial number.
 </summary>
	<param name="LicenseKey">The license number to validate. Liberation Key.</param>
	<param name="SerialNumber">A magic string that is application specific. This should be the same as was originally created by the application.</param>
	<param name="Licensee">Name of party to whom this license is issued. This should be the same as was used to create the serial number.</param>
	<param name="ProductCode">A unique 4 digit number assigned to this product. This should be the same as was used to create the license key.</param>
	<param name="ExpireDate">Use this field for time-based serial numbers. This should be the same as was used to create the license key.</param>
	<param name="UserData">This field is caller defined. This should be the same as was used to create the license key.</param>
	<param name="RegisteredLevel"></param>
	<returns>True if the license key checks out, False otherwise.</returns>
	<remarks>See code for important notes!</remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.AddSwapBits(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 This is used to swap various bits in the serial number. It's sole purpose
 is to alter the output serial number.
 
 This process is "played" forwards during the key creation, and in reverse
 when validating. This mangling process should be identical for key creation
 and validation. Add as many combinations as you like.
 </summary>
	<param name="Word1"></param>
	<param name="Bit1"></param>
	<param name="Word2"></param>
	<param name="Bit2"></param>
	<remarks> It is recommended that there be at least 6 combinations in case.
 the bits being swapped are the same (2 swap bits for words 2, 3, 4). </remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.SplitKey(System.String@,System.Object@)">
	<summary>
 Shared code to massage the input serial number, and slice it into
 the required number of segments.
 </summary>
	<param name="LicenseKey"></param>
	<param name="KeySegs"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.SegmentValue(System.String)">
	<summary>
 Converts a hex string representation into a 4 byte decimal value.
 </summary>
	<param name="HexString"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.SwapBit(ActiveLock37Net.clsShortLicenseKey.TBits@,System.Object@)">
	<summary>
 Swaps any two bits. The bits can differ as long as they are in the range of 0 and 15.
 </summary>
	<param name="BitList"></param>
	<param name="KeySegs"></param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.CRC(System.Byte[]@,System.Int32@)">
	<summary>
 Returns a 16-bit CRC value for a data block.
 </summary>
	<param name="Buffer"></param>
	<param name="InputCrc"></param>
	<returns></returns>
	<remarks>Refer to CRC-CCITT compute-on-the-fly implementatations for more info.</remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.HexWORD(System.Int32,System.String)">
	<summary>
 Returns a hex string representation of a WORD.
 </summary>
	<param name="WORD">The 2 byte value to convert to a hex string.</param>
	<param name="Prefix">A value such as "0x" or "&amp;H".</param>
	<returns></returns>
	<remarks>It's up to the caller to ensure the subject value is a 16-bit number.</remarks>
</member><member name="M:ActiveLock37Net.clsShortLicenseKey.ExeIsPatched(System.String)">
	<summary>
 Tests if the supplied file has been altered by computing a checksum for
 the file and comparing it against the checksum in the executable image.
 </summary>
	<param name="FilePath">Full path to file to check. Caller is responsible
 for ensuring that the path exists, and that it is an executable.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.clsShortLicenseKey">
	<summary>
		<para>Use to provide license key generation and validation. This class exposes an
 abstract interface that can be used to implement licensing for all of your
 commerical and shareware applications.  Keys can be cloaked with a bit
 swapping technique, and with a private key.  Keys can also be tied to a
 licensee.</para>
	</summary>
	<remarks>See code, within, for more info!</remarks>
</member><member name="M:ActiveLock37Net.modBase64.Base64_Encode(System.String@)">
	<summary>
 Return the Base64 encoded string
 </summary>
	<param name="DecryptedText">The decrypted string</param>
	<returns>Base64 encoded string</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modBase64.Base64_Decode(System.String@)">
	<summary>
 Return the Base64 decoded string
 </summary>
	<param name="a">The string to be decoded</param>
	<returns>Base64 decoded string</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modBase64.mimeencode(System.Int16@)">
	<summary>
 Used by the Base64_encode function
 </summary>
	<param name="w"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modBase64.mimedecode(System.String@)">
	<summary>
 Used by the Base64_decode function
 </summary>
	<param name="a"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modBase64">
	<summary>
 This module contains Base-64 encoding and decoding routines.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.ActiveLock.AL_REGISTRY_HIVE">
	<summary>
 Registry hive used to store Activelock settings.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.ActiveLock.mfInit">
	<summary>
 flag to indicate that ActiveLock has been initialized
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.GetVolumeInformation(System.String,System.Text.StringBuilder,System.Int32,System.Int32,System.Int32,System.Int32,System.Text.StringBuilder,System.Int32)">
	<summary>
		<para>GetVolumeInformation</para>
	</summary>
	<param name="lpRootPathName">String - A pointer to a string that contains the root directory of the volume to be described.</param>
	<param name="lpVolumeNameBuffer">A pointer to a buffer that receives the name of a specified volume. The maximum buffer size is MAX_PATH+1.</param>
	<param name="nVolumeNameSize">The length of a volume name buffer, in TCHARs. The maximum buffer size is MAX_PATH+1.</param>
	<param name="lpVolumeSerialNumber">A pointer to a variable that receives the volume serial number.</param>
	<param name="lpMaximumComponentLength">A pointer to a variable that receives the maximum length, in TCHARs, of a file name component that a specified file system supports.</param>
	<param name="lpFileSystemFlags">A pointer to a variable that receives flags associated with the specified file system.</param>
	<param name="lpFileSystemNameBuffer">A pointer to a buffer that receives the name of the file system, for example, the FAT file system or the NTFS file system. The maximum buffer size is MAX_PATH+1.</param>
	<param name="nFileSystemNameSize">The length of the file system name buffer, in TCHARs. The maximum buffer size is MAX_PATH+1.</param>
	<returns>
		<para>If all the requested information is retrieved, the return value is nonzero.</para>
		<para>If not all the requested information is retrieved, the return value is zero (0). To get extended error information, call GetLastError.</para>
	</returns>
	<remarks>
		<para>See <a href="http://msdn.microsoft.com/en-us/library/aa364993(VS.85).aspx">http://msdn.microsoft.com/en-us/library/aa364993(VS.85).aspx</a></para>
	</remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_LicenseKeyType">
	<summary>
 IActiveLock_LicenseKeyType - Specifies the ALLicenseKeyTypes type
 </summary>
	<value>ByVal RHS As ALLicenseKeyTypes - ALLicenseKeyTypes type</value>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_RegisteredLevel">
	<summary>
 Gets the Registered Level for the license after validating it.
 </summary>
	<value></value>
	<returns>String - License RegisteredLevel</returns>
	<remarks>None</remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_LicenseClass">
	<summary>
 Gets the LicenseClass
 </summary>
	<value></value>
	<returns>String - LicenseClass</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_RemainingTrialDays">
	<summary>
 Gets the Number of Used Trial Days
 </summary>
	<value></value>
	<returns>Integer - License Used Trial Days</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_RemainingTrialRuns">
	<summary>
 Gets the Number of Used Trial Runs
 </summary>
	<value></value>
	<returns>Integer - License Used Trial Runs</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_MaxCount">
	<summary>
 Gets the Number of concurrent users for the networked license
 </summary>
	<value></value>
	<returns>Integer - Number of concurrent users for the networked license</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_AutoRegisterKeyPath">
	<summary>
		<para>IActiveLock Interface implementation</para>
		<para>Specifies the liberation key auto file path name</para>
	</summary>
	<value>ByVal RHS As String - Liberation key file auto path name</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.AutoRegisterKeyPath">
	<summary>
 Sets the auto register file full path
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_EventNotifier">
	<summary>
 Gets a notification from Activelock
 </summary>
	<value></value>
	<returns>ActiveLockEventNotifier - ???</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_RegisteredDate">
	<summary>
 Gets the license registration date after validating it.
 </summary>
	<value></value>
	<returns>String - License registration date.</returns>
	<remarks>This is the date the license was generated by Alugen. NOT the date the license was activated.</remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_RegisteredUser">
	<summary>
 Gets the registered user name after validating the license
 </summary>
	<value></value>
	<returns>String - Registered user name</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_ExpirationDate">
	<summary>
 Returns the expiration date of the license after validating it
 </summary>
	<value></value>
	<returns>String - Expiration date of the license</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_KeyStorePath">
	<summary>
 Specifies the license file path name
 </summary>
	<value>ByVal RHS As String - License file path name</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_KeyStoreType">
	<summary>
		<para>Specifies the key store type</para>
		<para>This version of Activelock does not work with the registry</para>
	</summary>
	<value>ByVal RHS As LicStoreType - License store type</value>
	<remarks>Portions of this (RegistryKeyStoreProvider) not implemented yet</remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_LockType">
	<summary>
 Gets or Sets the ALLockTypes type
 </summary>
	<value>ByVal RHS As ALLockTypes - ALLockTypes type</value>
	<returns>ALLockTypes - Lock types type</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_TrialHideType">
	<summary>
 Gets the ALTrialHideTypes type
 </summary>
	<value></value>
	<returns>ALTrialHideTypes - Trial Hide types type</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_SoftwareName">
	<summary>
 Gets the SoftwareName for the license
 </summary>
	<value></value>
	<returns>String - Software name  for the license</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_SoftwarePassword">
	<summary>
 Gets/Sets the SoftwarePassword for the license
 </summary>
	<value>ByVal RHS As String - Software Password for the license</value>
	<returns>String - Software Password for the license</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_CheckTimeServerForClockTampering">
	<summary>
 Specifies whether a Time Server should be used to check Clock Tampering
 </summary>
	<value>ByVal iServer As Integer - Flag being passed to check the time server</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_CheckSystemFilesForClockTampering">
	<summary>
 Specifies whether a Time Server should be used to check Clock Tampering
 </summary>
	<value>ByVal iServer As Integer - Flag being passed to check the time server</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_LicenseFileType">
	<summary>
 Specifies whether the License File should be encrypted or not
 </summary>
	<value>ByVal Value As IActiveLock.ALLicenseFileTypes - Flag to indicate the license file will be encrypted or not</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_AutoRegister">
	<summary>
 Not Documented!
 </summary>
	<value>ALAutoRegisterTypes - ALAutoRegisterType</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_TrialWarning">
	<summary>
 Specifies whether the License File should be encrypted or not
 </summary>
	<value>ByVal Value As IActiveLock.ALTrialWarningTypes - Flag to indicate the license file will be encrypted or not.</value>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_TrialType">
	<summary>
 Gets/Sets the TrialType for the license
 </summary>
	<value>ByVal Value As IActiveLock.ALTrialTypes</value>
	<returns>ALTrialTypes - Trial Type  for the license</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_TrialLength">
	<summary>
 Gets/Sets the TrialLength for the license
 </summary>
	<value></value>
	<returns>Integer - Trial Length  for the license</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_InstallationCode(System.String,ActiveLock37Net.ProductLicense)">
	<summary>
 Combines the user name with the lock code and returns it as the installation code
 </summary>
	<param name="User">Optional - String - User name</param>
	<param name="Lic">Optional - ProductLicense - Product License</param>
	<value></value>
	<returns>String - Installation code</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_SoftwareVersion">
	<summary>
 Gets the SoftwareVersion for the license
 </summary>
	<value></value>
	<returns>String - Software version  for the license</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_SoftwareCode">
	<summary>
 Specifies the SoftwareCode for the license
 </summary>
	<value>ByVal RHS As String - Software code for the license</value>
	<remarks>SoftwareCode is an RSA public key.  This code will be used to verify license keys later on.</remarks>
</member><member name="P:ActiveLock37Net.ActiveLock.IActiveLock_UsedDays">
	<summary>
 Gets the number of days the license was used after validating it.
 </summary>
	<value></value>
	<returns>Integer - ?</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.Class_Initialize_Renamed">
	<summary>
 Not documented!
 </summary>
	<remarks>Class_Initialize was upgraded to Class_Initialize_Renamed</remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.#ctor">
	<summary>
 Not Documented!
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActiveLock_Init(System.String,System.String@)">
	<summary>
 Initalizes Activelock
 </summary>
	<param name="strPath"></param>
	<param name="autoLicString">ByRef autoLicString As String - Returned License Key of AutoRegister is successful.</param>
	<remarks>
		<para>Performs CRC check on Alcrypto.</para>
		<para>Performs auto license registration if the license file is found.</para>
	</remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.DoAutoRegistration(System.String@)">
	<summary>
 Checks the specified path to see if the auto registration liberation file is there
 </summary>
	<param name="strLibKey">strLibKey As String - Returned liberation key if auto register is successful.</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.ReadLibKey(System.String,System.String@)">
	<summary>
 Reads the liberation key from a file
 </summary>
	<param name="sFileName">ByVal sFileName As String - File name to read the liberation key from.</param>
	<param name="strLibKey">ByRef strLibKey As String -  Liberation key returned</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActiveLock_Acquire(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
	<summary>
		<para>Acquires an Activelock License.</para>
		<para>This is the main method that retrieves an Activelock license, validates it, and ends the trial license if it exists.</para>
	</summary>
	<param name="strMsg"></param>
	<param name="strRemainingTrialDays"></param>
	<param name="strRemainingTrialRuns"></param>
	<param name="strTrialLength"></param>
	<param name="strUsedDays"></param>
	<param name="strExpirationDate"></param>
	<param name="strRegisteredUser"></param>
	<param name="strRegisteredLevel"></param>
	<param name="strLicenseClass"></param>
	<param name="strMaxCount"></param>
	<param name="strLicenseFileType"></param>
	<param name="strLicenseType"></param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.CheckStreamCapability(System.String)">
	<summary>
 Not Documented!
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.ValidateKey(ActiveLock37Net.ProductLicense@)">
	<summary>
		<para>Validates the License Key using RSA signature verification.</para>
		<para>License key contains the RSA signature of IActiveLock_LockCode.</para>
	</summary>
	<param name="Lic">Lic As ProductLicense - Product license</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.ValidateShortKey(ActiveLock37Net.ProductLicense@,System.String)">
	<summary>
 Validates the License Key using the Short Key MD5 verification.
 </summary>
	<param name="Lic">Lic As ProductLicense - Product license</param>
	<param name="user">String - User</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.ValidateLic(ActiveLock37Net.ProductLicense@)">
	<summary>
 Validates the entire license (including lastused, etc.)
 </summary>
	<param name="Lic">ProductLicense - Product License</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.UpdateLastUsed(ActiveLock37Net.ProductLicense@)">
	<summary>
 Updates LastUsed property with current date stamp.
 </summary>
	<param name="Lic">ProductLicense - Product License</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActiveLock_Register(System.String,System.String@)">
	<summary>
 Registers Activelock license with a given liberation key
 </summary>
	<param name="LibKey">String - Liberation Key</param>
	<param name="user">Optional - String - User</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActiveLock_KillLicense(System.String,System.String)">
	<summary>
 KillLicense a specified Activelock license with a given an ID and file name
 </summary>
	<param name="SoftwareNameAndVersion">String - Software Name And Version</param>
	<param name="LicPath">Optional - String - License file path and name</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActiveLock_KillTrial">
	<summary>
 Kills a Trial License
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActiveLock_GenerateShortKey(System.String,System.String,System.String,System.String,ActiveLock37Net.ProductLicense.ALLicType,System.Int32,System.Int16)">
	<summary>
 Not Documented!
 </summary>
	<param name="SoftwareCode"></param>
	<param name="SerialNumber"></param>
	<param name="LicenseeAndRegisteredLevel"></param>
	<param name="Expiration"></param>
	<param name="LicType"></param>
	<param name="RegisteredLevel"></param>
	<param name="MaxUsers"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActiveLock_ResetTrial">
	<summary>
 Resets a Trial License
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActiveLock_LockCode(ActiveLock37Net.ProductLicense@)">
	<summary>
 Returns the lock code from a given Activelock license
 </summary>
	<param name="Lic">ProductLicense - Product License</param>
	<returns>String - Lock code</returns>
	<remarks>v3 includes the new lockHDFirmware option</remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.AppendLockString(System.String@,System.String)">
	<summary>
 Appends the lock string to the given installation code
 </summary>
	<param name="strLock">String - The lock string to be appended to, returns as an output</param>
	<param name="newSubString">String - The string to be appended to the lock string if strLock is empty string</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActiveLock_Transfer(System.String)">
	<summary>
 Not implemented yet
 </summary>
	<param name="OtherSoftwareCode">String - Installation code from another machine/software</param>
	<returns></returns>
	<remarks>Transfers an Activelock license from one machine/software to another</remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.IActivelock_GenerateShortSerial(System.String)">
	<summary>
 Generates a Short Key (Serial Number)
 </summary>
	<param name="HDDfirmwareSerial"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ActiveLock.specialChar(System.String)">
	<summary>
 Not Documented!
 </summary>
	<param name="s"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.ActiveLock">
	<summary>
		<para>This is an implementation of IActiveLock.</para>
		<para>It is not public-creatable, and so must only be accessed via ActiveLock.NewInstance() method.</para>
		<para>Includes Key generation and validation routines.</para>
	</summary>
	<remarks>If you want to turn off dll-checksumming, add this compilation flag to the Project Properties (Make tab) AL_DEBUG = 1</remarks>
</member><member name="T:ActiveLock37Net._IALUGenerator">
	<summary>
 _IALUGenerator - Interface
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IALUGenerator.mstrProductFile">
	<summary>
 Private Variable - mstrProductFile
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.IALUGenerator.mINIFile">
	<summary>
 Private Variable - mINIFile
 </summary>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.IALUGenerator.StoragePath">
	<summary>
 StoragePath - Write Only - Specifies the path where information about the products is stored.
 </summary>
	<value>ByVal strPath As String - INI file path</value>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IALUGenerator.SaveProduct(ActiveLock37Net.ProductInfo@)">
	<summary>
 SaveProduct - Saves a new product information to the product store.
 </summary>
	<param name="ProdInfo">ProdInfo As ProductInfo - Object containing product information to be saved.</param>
	<remarks>Raises error if product already exists.</remarks>
</member><member name="M:ActiveLock37Net.IALUGenerator.RetrieveProduct(System.String,System.String)">
	<summary>
 RetrieveProduct - Retrieves product information.
 </summary>
	<param name="name">ByVal name As String - Product name</param>
	<param name="Ver">ByVal Ver As String - Product version</param>
	<returns>ProductInfo - Object containing product information.</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IALUGenerator.RetrieveProducts">
	<summary>
 RetrieveProducts - Retrieves all product infos.
 </summary>
	<returns>ProductInfo - Array of ProductInfo objects.</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IALUGenerator.DeleteProduct(System.String,System.String)">
	<summary>
 DeleteProduct - Removes a product from the store.
 </summary>
	<param name="name">ByVal name As String - Product name</param>
	<param name="Ver">Ver As String - Product version</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.IALUGenerator.GenKey(ActiveLock37Net.ProductLicense@,System.String,System.String)">
	<summary>
 GenKey - Generates a liberation key for the specified product.
 </summary>
	<param name="Lic">Lic As ActiveLock3.ProductLicense - License object for which to generate the liberation key.</param>
	<param name="InstCode">ByVal InstCode As String - User installation code</param>
	<param name="RegisteredLevel">ByVal RegisteredLevel As String - Level for which the user is allowed</param>
	<returns>String - Generated Liberation Key</returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IALUGenerator">
	<summary>
 Interface for the ActiveLock Universal Generator (ALUGEN)
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.IKeyStoreProvider">
	<summary>
 This is the interface for a class that facilitates storing and retrieving of product license keys.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Daytime.THRESHOLD_SECONDS">
	<summary>
 Number of seconds that Windows clock can deviate from NIST and still be okay
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Daytime.Servers">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Daytime.LastHost">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Daytime.LastSysTime">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Daytime.GetTime">
	<summary>
 Returns UTC/GMT using an NIST server if possible, degrading to simply returning the system clock
 </summary>
	<returns>DateTime - Returns UTC/GMT using an NIST server if possible</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Daytime.SecondsDifference(System.DateTime,System.DateTime)">
	<summary>
	</summary>
	<param name="dt1"></param>
	<param name="dt2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Daytime.WindowsClockIncorrect">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Daytime.GetNISTTime(System.String)">
	<summary>
	</summary>
	<param name="host"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.Daytime.SYSTEMTIME">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Daytime.GetSystemTime(ActiveLock37Net.Daytime.SYSTEMTIME@)">
	<summary>
 Retrieves the current system date and time. The system time is expressed in
 Coordinated Universal Time (UTC).
 To retrieve the current system date and time in local time, use the
 GetLocalTime function.
 </summary>
	<param name="stru">A pointer to a SYSTEMTIME structure to receive the current system date and time. The lpSystemTime parameter must not be NULL. Using NULL will result in an access violation.</param>
	<returns>This function does not return a value or provide extended error information.</returns>
	<remarks>To set the current system date and time, use the SetSystemTime function.</remarks>
</member><member name="M:ActiveLock37Net.Daytime.SetSystemTime(ActiveLock37Net.Daytime.SYSTEMTIME@)">
	<summary>
 Sets the current system time and date. The system time is expressed in
 Coordinated Universal Time (UTC).
 </summary>
	<param name="stru">A pointer to a SYSTEMTIME structure that contains the
 new system date and time. The wDayOfWeek member of the SYSTEMTIME structure
 is ignored.</param>
	<returns>If the function succeeds, the return value is nonzero. If the
 function fails, the return value is zero. To get extended error information,
 call GetLastError.</returns>
	<remarks>The calling process must have the SE_SYSTEMTIME_NAME privilege.
 This privilege is disabled by default. The SetSystemTime function enables the
 SE_SYSTEMTIME_NAME privilege before changing the system time and disables the
 privilege before returning. For more information, see Running with Special Privileges.</remarks>
</member><member name="M:ActiveLock37Net.Daytime.SetWindowsClock(System.DateTime)">
	<summary>
 Sets system time.
 </summary>
	<param name="dt"></param>
	<remarks>Note: Use UTC time; Windows will apply time zone</remarks>
</member><member name="T:ActiveLock37Net.Daytime">
	<summary>
 Internet Time Server class by Alastair Dallas 01/27/04
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.mstrPath">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.mINIFile">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_PRODKEY">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_PRODNAME">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_PRODVER">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_LICENSEE">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_REGISTERED_LEVEL">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_MAXCOUNT">
	<summary>
 Maximum number of users
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_LICTYPE">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_LICCLASS">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_LICKEY">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_LICCODE">
	<summary>
	</summary>
	<remarks>New in v3.1</remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_EXP">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_REGISTERED_DATE">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_LASTRUN_DATE">
	<summary>
 date and time stamp
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FileKeyStoreProvider.KEY_LASTRUN_DATE_HASH">
	<summary>
 Hash of LastRunDate
 </summary>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FileKeyStoreProvider.IKeyStoreProvider_KeyStorePath">
	<summary>
 Creates an empty file if it doesn't exist
 </summary>
	<value>String - File path and name</value>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FileKeyStoreProvider.CreateEmptyFile(System.String)">
	<summary>
 Creates an empty file
 </summary>
	<param name="sFilePath">String - File path and name</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FileKeyStoreProvider.IKeyStoreProvider_Store(ActiveLock37Net.ProductLicense@,ActiveLock37Net.IActiveLock.ALLicenseFileTypes)">
	<summary>
 Write license properties to INI file section
 </summary>
	<param name="Lic">ProductLicense - Product license object</param>
	<param name="mLicenseFileType">IActiveLock.ALLicenseFileTypes - License file type!</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FileKeyStoreProvider.IKeyStoreProvider_Retrieve(System.String@,ActiveLock37Net.IActiveLock.ALLicenseFileTypes)">
	<summary>
 Retrieves the registered license for the specified product.
 </summary>
	<param name="ProductName">String - Product or application name</param>
	<param name="mLicenseFileType">IActiveLock.ALLicenseFileTypes - License file type!</param>
	<returns>ProductLicense - Returns the product license object</returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.FileKeyStoreProvider">
	<summary>
 This IKeyStoreProvider implementation is used to  maintain the license keys on a file system.
 </summary>
	<remarks>Implements IKeyStoreProvider interface.</remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.ENCRYPT_KEY">
	<summary>
 ActiveLock Encryption Key
 </summary>
	<remarks>!!!WARNING!!! It is highly recommended that you change this key for your version of ActiveLock before deploying your app.</remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.MAGICNUMBER_YES">
	<summary>
 ?Not Documented!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.MAGICNUMBER_NO">
	<summary>
 ?Not Documented!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.SERVICE_PROVIDER">
	<summary>
 ?Not Documented!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.KEY_CONTAINER">
	<summary>
 ?Not Documented!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.PROV_RSA_FULL">
	<summary>
 ?Not Documented!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.fInit">
	<summary>
 flag to indicate that module initialization has been done
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.CopyMem(System.Int32@,System.Int32@,System.Int32)">
	<summary>
 The RtlMoveMemory routine moves memory either forward or backward, aligned or unaligned, in 4-byte blocks, followed by any remaining bytes.
 </summary>
	<param name="Destination">Pointer to the destination of the move.</param>
	<param name="source">Pointer to the memory to be copied.</param>
	<param name="length">Specifies the number of bytes to be copied.</param>
	<remarks>See http://msdn.microsoft.com/en-us/library/ms803004.aspx for more Information</remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetModuleFileName(System.Int32,System.String,System.Int32)">
	<summary>
 Retrieves the fully-qualified path for the file that contains the specified module. The module must have been loaded by the current process.
 </summary>
	<param name="hModule">[in, optional] A handle to the loaded module whose path is being requested. If this parameter is NULL, GetModuleFileName retrieves the path of the executable file of the current process.</param>
	<param name="lpFileName">[out] A pointer to a buffer that receives the fully-qualified path of the module. If the length of the path is less than the size that the nSize parameter specifies, the function succeeds and the path is returned as a null-terminated string.</param>
	<param name="nSize">[in] The size of the lpFilename buffer, in TCHARs.</param>
	<returns>If the function succeeds, the return value is the length of the string that is copied
 to the buffer, in characters, not including the terminating null character. If the buffer is too
 small to hold the module name, the string is truncated to nSize characters including the
 terminating null character, the function returns nSize, and the function sets the last error
 to ERROR_INSUFFICIENT_BUFFER.</returns>
	<remarks>See http://msdn.microsoft.com/en-us/library/ms683197(VS.85).aspx for full Documentation!</remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.CheckSumReturnValues.CHECKSUM_SUCCESS">
	<summary>
 Success!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.CheckSumReturnValues.CHECKSUM_OPEN_FAILURE">
	<summary>
 Could not open the file.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.CheckSumReturnValues.CHECKSUM_MAP_FAILURE">
	<summary>
 Could not map the file.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.CheckSumReturnValues.CHECKSUM_MAPVIEW_FAILURE">
	<summary>
 Could not map a view of the file.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.CheckSumReturnValues.CHECKSUM_UNICODE_FAILURE">
	<summary>
 Could not convert the file name to Unicode.
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modActiveLock.CheckSumReturnValues">
	<summary>
 Not Inplimented - CheckSum return Values for MapFileAndCheckSum
 </summary>
	<remarks>See http://msdn.microsoft.com/en-us/library/ms680355(VS.85).aspx</remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.MapFileAndCheckSum(System.String,System.Int32@,System.Int32@)">
	<summary>
 Computes the checksum of the specified file
 </summary>
	<param name="FileName">[in] The file name of the file for which the checksum is to be computed.</param>
	<param name="HeaderSum">[out] A pointer to a variable that receives the original checksum from the image file, or zero if there is an error.</param>
	<param name="CheckSum">[out] A pointer to a variable that receives the computed checksum.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.SHGetSpecialFolderPath(System.IntPtr,System.String,System.Int32,System.Boolean)">
	<summary>
		<para>Retrieves the path of a special folder, identified by its <a href="http://msdn.microsoft.com/en-us/library/bb762494(VS.85).aspx">CSIDL</a>.</para>
		<para>Note: In Windows Vista, these values have been replaced by <a href="http://msdn.microsoft.com/en-us/library/bb762584(VS.85).aspx">KNOWNFOLDERID</a> values.
 See that topic for a list of the new constants and their corresponding CSIDL values.  For
 convenience, corresponding KNOWNFOLDERID values are also noted here for each CSIDL value.  The
 CSIDL system is supported under Windows Vista for compatibility reasons. However, new development
 should use KNOWNFOLDERID values rather than CSIDL values.</para>
	</summary>
	<param name="hWnd">Reserved.</param>
	<param name="lpszPath">[out] A pointer to a null-terminated string that receives the drive and path of the specified folder. This buffer must be at least MAX_PATH characters in size.</param>
	<param name="nFolder">See notes at http://msdn.microsoft.com/en-us/library/bb762494(VS.85).aspx</param>
	<param name="fCreate">[in] Indicates whether the folder should be created if it does not already exist. If this value is nonzero, the folder will be created. If this value is zero, the folder will not be created.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetProcAddress(System.Int32,System.String)">
	<summary>
 Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
 </summary>
	<param name="hModule">[in] A handle to the DLL module that contains the function or variable. The LoadLibrary, LoadLibraryEx, or GetModuleHandle function returns this handle. 
 <para>The GetProcAddress function does not retrieve addresses from modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx.</para>
	</param>
	<param name="lpProcName">[in] The function or variable name, or the function's ordinal value. If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero</param>
	<returns>If the function succeeds, the return value is the address of the exported function or variable.
 <para>If the function fails, the return value is NULL. To get extended error information, call GetLastError</para>
	</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms683212(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetModuleHandle(System.String)">
	<summary>
 Retrieves a module handle for the specified module. The module must have been loaded by the calling process.
 <para>To avoid the race conditions described in the Remarks section, use the GetModuleHandleEx function.</para>
	</summary>
	<param name="lpModuleName">[in, optional] see http://msdn.microsoft.com/en-us/library/ms683199(VS.85).aspx for more information</param>
	<returns>If the function succeeds, the return value is a handle to the specified module.
 <para>If the function fails, the return value is NULL. To get extended error information, call GetLastError</para>
	</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms683199(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetCurrentProcess">
	<summary>
 Retrieves a pseudo handle for the current process.
 </summary>
	<returns>The return value is a pseudo handle to the current process.</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms683179(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.IsWow64Process(System.Int32,System.Int32@)">
	<summary>
 Determines whether the specified process is running under WOW64.
 </summary>
	<param name="hProcess">[in] A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights.
 <para>Windows Server 2003 and Windows XP:  The handle must have the PROCESS_QUERY_INFORMATION access right.</para>
	</param>
	<param name="Wow64Process">[out] A pointer to a value that is set to TRUE if the process is running under WOW64. If the process is running under 32-bit Windows, the value is set to FALSE. If the process is a 64-bit application running under 64-bit Windows, the value is also set to FALSE</param>
	<returns>If the function succeeds, the return value is a nonzero value.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.
 </returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms684139(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetSystemWow64Directory(System.String,System.Int32)">
	<summary>
 Retrieves the path of the system directory used by WOW64. This directory is not present on 32-bit Windows.
 </summary>
	<param name="lpBuffer">[out] A pointer to the buffer to receive the path. This path does not end with a backslash.</param>
	<param name="uSize">[in] The maximum size of the buffer, in TCHARs.</param>
	<returns>If the function succeeds, the return value is the length, in TCHARs, of the string copied to the buffer, not including the terminating null character. If the length is greater than the size of the buffer, the return value is the size of the buffer required to hold the path.
 <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
		<para>On 32-bit Windows, the function always fails, and the extended error is set to ERROR_CALL_NOT_IMPLEMENTED.</para>
	</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms724405(VS.85).aspx for more information</remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.SYSTEMTIME.wYear">
	<summary>
 The year. The valid values for this member are 1601 through 30827.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.SYSTEMTIME.wMonth">
	<summary>
 Month. - The valid values for this member are 1 through 12 corresponding to Jan. through Dec.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.SYSTEMTIME.wDayOfWeek">
	<summary>
 Day of the week. The valid values for this member are 0 through 6, with Sunday being 0!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.SYSTEMTIME.wDay">
	<summary>
 The day of the month. The valid values for this member are 1 through 31.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.SYSTEMTIME.wHour">
	<summary>
 The hour. The valid values for this member are 0 through 23.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.SYSTEMTIME.wMinute">
	<summary>
 The minute. The valid values for this member are 0 through 59.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.SYSTEMTIME.wSecond">
	<summary>
 The second. The valid values for this member are 0 through 59.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.SYSTEMTIME.wMilliseconds">
	<summary>
 The millisecond. The valid values for this member are 0 through 999.
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modActiveLock.SYSTEMTIME">
	<summary>
 Specifies a date and time, using individual members for the month, day, year, weekday, hour, minute, second, and millisecond. The time is either in coordinated universal time (UTC) or local time, depending on the function that is being called.
 </summary>
	<remarks>See http://msdn.microsoft.com/en-us/library/ms724950(VS.85).aspx for full documentation!</remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION.bias">
	<summary>
		<para>The current bias for local time translation on this computer, in minutes. The bias
 is the difference, in minutes, between Coordinated Universal Time (UTC) and local time.
 All translations between UTC and local time are based on the following formula:</para>
		<para>UTC = local time + bias</para>
		<para>This member is required.</para>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION.StandardName">
	<summary>
		<para>A description for standard time. For example, "EST" could indicate Eastern Standard
 Time. The string will be returned unchanged by the <a href="http://msdn.microsoft.com/en-us/library/ms724421(VS.85).aspx">GetTimeZoneInformation</a> function. This
 string can be empty.</para>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION.StandardDate">
	<summary>
		<para>A SYSTEMTIME structure that contains a date and local time when the transition from
 daylight saving time to standard time occurs on this operating system. If the time zone does
 not support daylight saving time or if the caller needs to disable daylight saving time, the
 wMonth member in the SYSTEMTIME structure must be zero. If this date is specified, the
 DaylightDate member of this structure must also be specified. Otherwise, the system assumes
 the time zone data is invalid and no changes will be applied.</para>
	</summary>
	<remarks>See http://msdn.microsoft.com/en-us/library/ms725481.aspx for full Documentation!</remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION.StandardBias">
	<summary>
		<para>The bias value to be used during local time translations that occur during standard
 time. This member is ignored if a value for the StandardDate member is not supplied.</para>
		<para>This value is added to the value of the Bias member to form the bias used during
 standard time. In most time zones, the value of this member is zero.</para>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION.DaylightName">
	<summary>
		<para>A description for daylight saving time. For example, "PDT" could indicate Pacific
 Daylight Time. The string will be returned unchanged by the GetTimeZoneInformation function.
 This string can be empty.</para>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION.DaylightDate">
	<summary>
		<para>A SYSTEMTIME structure that contains a date and local time when the transition from
 standard time to daylight saving time occurs on this operating system. If the time zone does
 not support daylight saving time or if the caller needs to disable daylight saving time, the
 wMonth member in the SYSTEMTIME structure must be zero. If this date is specified, the
 StandardDate member in this structure must also be specified. Otherwise, the system assumes
 the time zone data is invalid and no changes will be applied.</para>
		<para>To select the correct day in the month, set the wYear member to zero, the wHour and
 wMinute members to the transition time, the wDayOfWeek member to the appropriate weekday, and
 the wDay member to indicate the occurrence of the day of the week within the month (1 to 5,
 where 5 indicates the final occurrence during the month if that day of the week does not occur
 5 times).</para>
		<para>If the wYear member is not zero, the transition date is absolute; it will only occur one
 time. Otherwise, it is a relative date that occurs yearly.</para>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION.DaylightBias">
	<summary>
		<para>The bias value to be used during local time translations that occur during daylight
 saving time. This member is ignored if a value for the DaylightDate member is not supplied.</para>
		<para>This value is added to the value of the Bias member to form the bias used during
 daylight saving time. In most time zones, the value of this member is –60.</para>
	</summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION">
	<summary>
 Specifies settings for a time zone.
 </summary>
	<remarks>See http://msdn.microsoft.com/en-us/library/ms725481.aspx for full documentation!</remarks>
</member><member name="T:ActiveLock37Net.modActiveLock.TimeZoneReturn">
	<summary>
 ?Not Documented!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_ID_UNKNOWN">
	<summary>
 The system cannot determine the current time zone. If daylight saving time is not used in the
 current time zone, this value is returned because there are no transition dates.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_ID_STANDARD">
	<summary>
 The system is operating in the range covered by the StandardDate member of the
 TIME_ZONE_INFORMATION structure.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_ID_INVALID">
	<summary>
 If the function fails, the return value is TIME_ZONE_ID_UNKNOWN. To get extended error
 information, call GetLastError.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.TIME_ZONE_ID_DAYLIGHT">
	<summary>
 The system is operating in the range covered by the DaylightDate member of the
 TIME_ZONE_INFORMATION structure.
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetSystemTime(ActiveLock37Net.modActiveLock.SYSTEMTIME@)">
	<summary>
 Retrieves the current system date and time. The system time is expressed in Coordinated
 Universal Time (UTC).
 </summary>
	<param name="lpSystemTime">A pointer to a SYSTEMTIME structure to receive the current system date and time. The lpSystemTime parameter must not be NULL. Using NULL will result in an access violation.</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetTimeZoneInformation(ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION@)">
	<summary>
 Retrieves the current time zone settings. These settings control the translations between
 Coordinated Universal Time (UTC) and local time.
 </summary>
	<param name="lpTimeZoneInformation">A pointer to a <see cref="T:ActiveLock37Net.modActiveLock.TIME_ZONE_INFORMATION"/> structure to receive the current settings.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.FORMAT_MESSAGE_ALLOCATE_BUFFER">
	<summary>
 The function allocates a buffer large enough to hold the formatted message, and places a pointer
 to the allocated buffer at the address specified by lpBuffer. The lpBuffer parameter is a pointer
 to an LPTSTR; you must cast the pointer to an LPTSTR (for example, (LPTSTR)&amp;lpBuffer). The nSize
 parameter specifies the minimum number of TCHARs to allocate for an output message buffer. The
 caller should use the LocalFree function to free the buffer when it is no longer needed.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.FORMAT_MESSAGE_ARGUMENT_ARRAY">
	<summary>
		<para>The Arguments parameter is not a va_list structure, but is a pointer to an array of values
 that represent the arguments.</para>
		<para>This flag cannot be used with 64-bit integer values. If you are using a 64-bit integer,
 you must use the va_list structure.</para>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.FORMAT_MESSAGE_FROM_HMODULE">
	<summary>
		<para>The lpSource parameter is a module handle containing the message-table resource(s) to search. If
 this lpSource handle is NULL, the current process's application image file will be searched. This
 flag cannot be used with FORMAT_MESSAGE_FROM_STRING.</para>
		<para>If the module has no message table resource, the function fails with
 ERROR_RESOURCE_TYPE_NOT_FOUND.</para>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.FORMAT_MESSAGE_FROM_STRING">
	<summary>
 The lpSource parameter is a pointer to a null-terminated string that contains a message 
 definition. The message definition may contain insert sequences, just as the message text in a
 message table resource may. This flag cannot be used with FORMAT_MESSAGE_FROM_HMODULE or
 FORMAT_MESSAGE_FROM_SYSTEM.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.FORMAT_MESSAGE_FROM_SYSTEM">
	<summary>
		<para>The function should search the system message-table resource(s) for the requested message.
 If this flag is specified with FORMAT_MESSAGE_FROM_HMODULE, the function searches the system
 message table if the message is not found in the module specified by lpSource. This flag cannot
 be used with FORMAT_MESSAGE_FROM_STRING.</para>
		<para>If this flag is specified, an application can pass the result of the GetLastError function
 to retrieve the message text for a system-defined error.</para>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.FORMAT_MESSAGE_IGNORE_INSERTS">
	<summary>
 Insert sequences in the message definition are to be ignored and passed through to the output
 buffer unchanged. This flag is useful for fetching a message for later formatting. If this flag
 is set, the Arguments parameter is ignored.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.FORMAT_MESSAGE_MAX_WIDTH_MASK">
	<summary>
 The function ignores regular line breaks in the message definition text. The function stores
 hard-coded line breaks in the message definition text into the output buffer. The function
 generates no new line breaks.
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.FormatMessage(System.Int32,System.Int64@,System.Int32,System.Int32,System.String,System.Int32,System.Int32@)">
	<summary>
 Formats a message string. The function requires a message definition as input. The message
 definition can come from a buffer passed into the function. It can come from a message table
 resource in an already-loaded module. Or the caller can ask the function to search the system's
 message table resource(s) for the message definition. The function finds the message definition
 in a message table resource based on a message identifier and a language identifier. The function
 copies the formatted message text to an output buffer, processing any embedded insert sequences
 if requested.
 </summary>
	<param name="dwFlags">[in] The formatting options, and how to interpret the lpSource parameter.
 The low-order byte of dwFlags specifies how the function handles line breaks in the output buffer.
 The low-order byte can also specify the maximum width of a formatted output line.</param>
	<param name="lpSource">[in, optional] The location of the message definition. The type of this
 parameter depends upon the settings in the dwFlags parameter. </param>
	<param name="dwMessageId">[in] The message identifier for the requested message. This parameter
 is ignored if dwFlags includes FORMAT_MESSAGE_FROM_STRING.</param>
	<param name="dwLanguageId">[in] The language identifier for the requested message. This parameter
 is ignored if dwFlags includes FORMAT_MESSAGE_FROM_STRING.</param>
	<param name="lpBuffer">[out]<para>A pointer to a buffer that receives the null-terminated string
 that specifies the formatted message. If dwFlags includes FORMAT_MESSAGE_ALLOCATE_BUFFER, the
 function allocates a buffer using the LocalAlloc function, and places the pointer to the buffer
 at the address specified in lpBuffer.</para>
		<para>This buffer cannot be larger than 64K bytes.</para></param>
	<param name="nSize">[in] <para>If the FORMAT_MESSAGE_ALLOCATE_BUFFER flag is not set, this
 parameter specifies the size of the output buffer, in TCHARs. If FORMAT_MESSAGE_ALLOCATE_BUFFER
 is set, this parameter specifies the minimum number of TCHARs to allocate for an output buffer.</para>
		<para>The output buffer cannot be larger than 64K bytes.</para>
	</param>
	<param name="Arguments">[in, optional] An array of values that are used as insert values in the
 formatted message. A %1 in the format string indicates the first value in the Arguments array;
 a %2 indicates the second argument; and so on.</param>
	<returns>If the function succeeds, the return value is the number of TCHARs stored in the output
 buffer, excluding the terminating null character. If the function fails, the return value is zero.
 To get extended error information, call GetLastError.</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GeneralWinDirApi(System.String,System.Int32)">
	<summary>
 Retrieves the path of the Windows directory. The Windows directory contains such files as
 applications, initialization files, and help files.
 </summary>
	<param name="lpBuffer">[out] A pointer to a buffer that receives the path. This path does not end
 with a backslash unless the Windows directory is the root directory. For example, if the Windows
 directory is named Windows on drive C, the path of the Windows directory retrieved by this
 function is C:\Windows. If the system was installed in the root directory of drive C, the path
 retrieved is C:\.</param>
	<param name="nSize">[in] The maximum size of the buffer specified by the lpBuffer parameter, in
 TCHARs. This value should be set to MAX_PATH.</param>
	<returns><para>If the function succeeds, the return value is the length of the string copied to
 the buffer, in TCHARs, not including the terminating null character.</para>
		<para>If the length is greater than the size of the buffer, the return value is the size of the
 buffer required to hold the path.</para>
	</returns>
	<remarks>The Windows directory is the directory where an application should store initialization
 and help files. If the user is running a shared version of the system, the Windows directory is
 guaranteed to be private for each user.</remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetSystemDirectory(System.String,System.Int32)">
	<summary>
 Retrieves the path of the system directory. The system directory contains system files such as
 dynamic-link libraries and drivers.
 </summary>
	<param name="lpBuffer">[out] A pointer to the buffer to receive the path. This path does not end
 with a backslash unless the system directory is the root directory. For example, if the system
 directory is named Windows\System on drive C, the path of the system directory retrieved by this
 function is C:\Windows\System.</param>
	<param name="nSize">[in] The maximum size of the buffer, in TCHARs.</param>
	<returns>If the function succeeds, the return value is the length, in TCHARs, of the string copied
 to the buffer, not including the terminating null character. If the length is greater than the
 size of the buffer, the return value is the size of the buffer required to hold the path,
 including the terminating null character.</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetLocaleInfo(System.Int32,System.Int32,System.String,System.Int32)">
	<summary>
 Retrieves information about a locale specified by identifier
 <para>Note: For interoperability reasons, the application should prefer the GetLocaleInfoEx function to GetLocaleInfo because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales. Any application that runs only on Windows Vista and later should use GetLocaleInfoEx.</para>
	</summary>
	<param name="Locale"></param>
	<param name="LCType"></param>
	<param name="lpLCData"></param>
	<param name="cchData"></param>
	<returns></returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/dd318101(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.SetLocaleInfo(System.Int32,System.Int32,System.String)">
	<summary>
 Sets an item of information in the user override portion of the current locale. This function does not set the system defaults.
 <para>Caution  Because this function modifies values for all applications, it should only be called by the regional and language options functionality of Control Panel, or a similar utility. If making an international change to system parameters, the calling application must broadcast the WM_SETTINGCHANGE message to avoid causing instabilities in other applications.</para>
	</summary>
	<param name="Locale"></param>
	<param name="LCType"></param>
	<param name="lpLCData"></param>
	<returns></returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/dd374049(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.GetUserDefaultLCID">
	<summary>
 see http://msdn.microsoft.com/en-us/library/dd318135(VS.85).aspx for more information
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.ConnectionQualityString">
	<summary>
 Used by Function IsWebConnected
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.InternetGetConnectedState(System.Int32@,System.Int32)">
	<summary>
 Retrieves the connected state of the local system.
 </summary>
	<param name="lpSFlags">[out] Pointer to a variable that receives the connection description. This
 parameter may return a valid flag even when the function returns FALSE.</param>
	<param name="dwReserved">[in] This parameter is reserved and must be 0.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.InetConnState.modem">
	<summary>
 Local system uses a modem to connect to the Internet.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.InetConnState.lan">
	<summary>
 Local system uses a local area network to connect to the Internet.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.InetConnState.proxy">
	<summary>
 Local system uses a proxy server to connect to the Internet.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.InetConnState.ras">
	<summary>
 ?Undocumented!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.InetConnState.offline">
	<summary>
 Local system is in offline mode.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modActiveLock.InetConnState.configured">
	<summary>
 Local system has a valid connection to the Internet, but it might or might not be currently
 connected.
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modActiveLock.InetConnState">
	<summary>
 Internet connection states!
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.TrimNulls(System.String@)">
	<summary>
 Trims Null characters from the string.
 </summary>
	<param name="startstr">String - String to be trimmed</param>
	<returns>String - Trimmed string</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.ReadFile(System.String,System.String@)">
	<summary>
 Reads a binary file into the sData buffer. Returns the number of bytes read.
 </summary>
	<param name="sPath">String - Path to the file to be read</param>
	<param name="sData">String - Output parameter contains the data that has been read</param>
	<returns>Long - Number of bytes read, 0 if no file was read</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.EndSub">
	<summary>
 This is a dummy sub. Used to circumvent the End statement restriction in COM DLLs.
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.MD5HashFile(System.String)">
	<summary>
 Computes an MD5 hash of the specified file.
 </summary>
	<param name="strPath">String - File path</param>
	<returns>String - MD5 Hash Value</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.FileExists(System.String)">
	<summary>
 Checks if a file exists in the system.
 </summary>
	<param name="strFile">String - File path and name</param>
	<returns>Boolean - True if file exists, False if it doesn't</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.LocalTimeZone(ActiveLock37Net.modActiveLock.TimeZoneReturn)">
	<summary>
 Retrieves the local time zone.
 </summary>
	<param name="returnType">TimeZoneReturn - Type of time zone information being requested</param>
	<returns>Variant - Return type varies depending on returnValue parameter.</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.WinError(System.Int32)">
	<summary>
 Retrieves the error text for the specified Windows error code
 </summary>
	<param name="lLastDLLError">Long - Last DLL error as an input</param>
	<returns>String - Error message string</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.WinDir">
	<summary>
 Gets the windows directory
 </summary>
	<returns>String - Windows directory path</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.WinSysDir">
	<summary>
 Gets the Windows system directory
 </summary>
	<returns>String - Windows system directory path</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.FolderExists(System.String)">
	<summary>
 Checks if a Folder Exists
 </summary>
	<param name="sFolder">String -  Name of the folder in question</param>
	<returns>Boolean - Returns true if the Folder Exists</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.MakeWord(System.Byte,System.Byte)">
	<summary>
 Packs two 8-bit integers into a 16-bit integer.
 </summary>
	<param name="LoByte">Byte - A byte that is to become the Low byte.</param>
	<param name="HiByte">Byte - A byte that is to become the High byte.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.HiByte(System.Int16)">
	<summary>
 ?Not Documented!
 </summary>
	<param name="w"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.LoByte(System.Int16)">
	<summary>
 ?Not Documented!
 </summary>
	<param name="w"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.ActivelockGetSpecialFolder(System.Int64)">
	<summary>
 Gets special folders...
 </summary>
	<param name="CSIDL">See this functions Definition for detailed info...</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.PSWD">
	<summary>
 ?Not Documented!
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.REGKEY1">
	<summary>
 ?Not Documented!
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.IsNumberIncluded(System.Int64,System.Int64)">
	<summary>
 ?Not Documented!
 </summary>
	<param name="n1"></param>
	<param name="n2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modActiveLock.IsWebConnected">
	<summary>
 Checks to see if there is a web connection.
 </summary>
	<returns>True if connected, False otherwise.</returns>
	<remarks>This also sets the ConnectionQualityString</remarks>
</member><member name="T:ActiveLock37Net.modActiveLock">
	<summary>
		<para>This module contains common utility routines that can be shared between
 ActiveLock and the client application.</para>
	</summary>
	<remarks>See the TODO List, within</remarks>
</member><member name="M:ActiveLock37Net.modHardware.GetVersionEx(ActiveLock37Net.modHardware.OSVERSIONINFO@)">
	<summary>
 Retrieves information about the current operating system.
 </summary>
	<param name="LpVersionInformation">[in, out] An OSVERSIONINFO or OSVERSIONINFOEX structure that receives the operating system information.
 <para>Before calling the GetVersionEx function, set the dwOSVersionInfoSize member of the structure as appropriate to indicate which data structure is being passed to this function.</para>
	</param>
	<returns>If the function succeeds, the return value is a nonzero value.
 <para>If the function fails, the return value is zero. To get extended error information, call GetLastError. The function fails if you specify an invalid value for the dwOSVersionInfoSize member of the OSVERSIONINFO or OSVERSIONINFOEX structure.</para>
	</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms724451(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modHardware.CreateFile(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe. The function returns a handle that can be used to access the file or device for various types of I/O depending on the file or device and the flags and attributes specified.
 <para>To perform this operation as a transacted operation, which results in a handle that can be used for transacted I/O, use the CreateFileTransacted function</para>
	</summary>
	<param name="lpFileName"></param>
	<param name="dwDesiredAccess"></param>
	<param name="dwShareMode"></param>
	<param name="lpSecurityAttributes"></param>
	<param name="dwCreationDisposition"></param>
	<param name="dwFlagsAndAttributes"></param>
	<param name="hTemplateFile"></param>
	<returns></returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/aa363858(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modHardware.CloseHandle(System.Int32)">
	<summary>
 Closes an open object handle.
 </summary>
	<param name="hObject">[in] A valid handle to an open object.</param>
	<returns>If the function succeeds, the return value is nonzero.
 <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
		<para>If the application is running under a debugger, the function will throw an exception if it receives either a handle value that is not valid or a pseudo-handle value. This can happen if you close a handle twice, or if you call CloseHandle on a handle returned by the FindFirstFile function instead of calling the FindClose function.</para>
	</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms724211(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modHardware.DeviceIoControl(System.Int32,System.Int32,ActiveLock37Net.modHardware.SENDCMDINPARAMS@,System.Int32,System.Int32@,System.Int32,System.Int32@,System.Int32)">
	<summary>
 Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.
 </summary>
	<param name="hDevice">[in] A handle to the device on which the operation is to be performed. The device is typically a volume, directory, file, or stream. To retrieve a device handle, use the CreateFile function. For more information, see Remarks.</param>
	<param name="dwIoControlCode">[in] The control code for the operation. This value identifies the specific operation to be performed and the type of device on which to perform it. 
 <para>For a list of the control codes, see Remarks. The documentation for each control code provides usage details for the lpInBuffer, nInBufferSize, lpOutBuffer, and nOutBufferSize parameters.</para>
	</param>
	<param name="lpInBuffer">[in, optional] A pointer to the input buffer that contains the data required to perform the operation. The format of this data depends on the value of the dwIoControlCode parameter. 
 <para>This parameter can be NULL if dwIoControlCode specifies an operation that does not require input data.</para>
	</param>
	<param name="nInBufferSize">[in] The size of the input buffer, in bytes.</param>
	<param name="lpOutBuffer">[out, optional] A pointer to the output buffer that is to receive the data returned by the operation. The format of this data depends on the value of the dwIoControlCode parameter. 
 <para>This parameter can be NULL if dwIoControlCode specifies an operation that does not return data.</para>
	</param>
	<param name="nOutBufferSize">[in] The size of the output buffer, in bytes.</param>
	<param name="lpBytesReturned">see http://msdn.microsoft.com/en-us/library/aa363216(VS.85).aspx for more information</param>
	<param name="lpOverlapped">see http://msdn.microsoft.com/en-us/library/aa363216(VS.85).aspx for more information</param>
	<returns>If the operation completes successfully, the return value is nonzero.
 <para>If the operation fails or is pending, the return value is zero. To get extended error information, call GetLastError.</para>
	</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/aa363216(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modHardware.CopyMemory(System.Int32@,System.Int32@,System.Int32)">
	<summary>
 Copies a block of memory from one location to another.
 </summary>
	<param name="Destination">[in] A pointer to the starting address of the copied block's destination.</param>
	<param name="Source">[in] A pointer to the starting address of the block of memory to copy.</param>
	<param name="Length">[in] The size of the block of memory to copy, in bytes.</param>
	<remarks>see http://msdn.microsoft.com/en-us/library/aa366535%28VS.85%29.aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modHardware.CreateFile2(System.String,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
	<summary>
 Creates or opens a file or I/O device.
 <para>see http://msdn.microsoft.com/en-us/library/aa363858(VS.85).aspx for more information</para>
	</summary>
	<param name="lpFileName"></param>
	<param name="dwDesiredAccess"></param>
	<param name="dwShareMode"></param>
	<param name="lpSecurityAttributes"></param>
	<param name="dwCreationDisposition"></param>
	<param name="dwFlagsAndAttributes"></param>
	<param name="hTemplateFile"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.GETVERSIONOUTPARAMS.bVersion">
	<summary>
 Binary driver version.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.GETVERSIONOUTPARAMS.bRevision">
	<summary>
 Binary driver revision
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.GETVERSIONOUTPARAMS.bReserved">
	<summary>
 Not used
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.GETVERSIONOUTPARAMS.bIDEDeviceMap">
	<summary>
 Bit map of IDE devices
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.GETVERSIONOUTPARAMS.fCapabilities">
	<summary>
 Bit mask of driver capabilities
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.GETVERSIONOUTPARAMS.dwReserved">
	<summary>
 For future use
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modHardware.GETVERSIONOUTPARAMS">
	<summary>
 contains the data returned from the Get Driver Version function
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.IDEREGS.bFeaturesReg">
	<summary>
 Used for specifying SMART "commands"
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.IDEREGS.bSectorCountReg">
	<summary>
 IDE sector count register
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.IDEREGS.bSectorNumberReg">
	<summary>
 IDE sector number register
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.IDEREGS.bCylLowReg">
	<summary>
 IDE low order cylinder value
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.IDEREGS.bCylHighReg">
	<summary>
 IDE high order cylinder value
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.IDEREGS.bDriveHeadReg">
	<summary>
 IDE drive/head register
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.IDEREGS.bCommandReg">
	<summary>
 Actual IDE command
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.IDEREGS.bReserved">
	<summary>
 reserved for future use - must be zero
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modHardware.IDEREGS">
	<summary>
 IDE registers
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.SENDCMDINPARAMS.cBufferSize">
	<summary>
 Buffer size in bytes
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.SENDCMDINPARAMS.irDriveRegs">
	<summary>
 Structure with drive register values.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.SENDCMDINPARAMS.bDriveNumber">
	<summary>
 Physical drive number to send command to (0,1,2,3).
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.SENDCMDINPARAMS.bReserved">
	<summary>
 Bytes reserved
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.SENDCMDINPARAMS.dwReserved">
	<summary>
 DWORDS reserved
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.SENDCMDINPARAMS.bBuffer">
	<summary>
 Input buffer.
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modHardware.SENDCMDINPARAMS">
	<summary>
 contains the input parameters for the Send Command to Drive function
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.DRIVERSTATUS.bDriverError">
	<summary>
 Error code from driver, or 0 if no error
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.modHardware.DRIVERSTATUS.bIDEStatus">
	<summary>
 Contents of IDE Error register
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modHardware.DRIVERSTATUS">
	<summary>
 Status returned from driver
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modHardware.STATUS_FLAGS">
	<summary>
 Status Flags Values
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modHardware.ZeroMemory(System.Int32@,System.Int32)">
	<summary>
 Fills a block of memory with zeros.
 <para>To avoid any undesired effects of optimizing compilers, use the SecureZeroMemory function.</para>
	</summary>
	<param name="dest">[in] A pointer to the starting address of the block of memory to fill with zeros.</param>
	<param name="numBytes">[in] The size of the block of memory to fill with zeros, in bytes.</param>
	<remarks>see http://msdn.microsoft.com/en-us/library/aa366920(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modHardware.DeviceIoControl(System.Int32,System.Int32,System.Object@,System.Int32,System.Object@,System.Int32,System.Int32@,System.Int32@)">
	<summary>
 Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.
 </summary>
	<param name="hDevice"></param>
	<param name="dwIoControlCode"></param>
	<param name="lpInBuffer"></param>
	<param name="nInBufferSize"></param>
	<param name="lpOutBuffer"></param>
	<param name="nOutBufferSize"></param>
	<param name="lpBytesReturned"></param>
	<param name="lpOverlapped"></param>
	<returns></returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/aa363216(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.modHardware.GetComputerName">
	<summary>
 Gets the computer name on the network
 </summary>
	<returns>Computer name</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modHardware.HDSerial(System.String@)">
	<summary>
 Function to return the serial number for a hard drive Currently works on local drives, mapped drives, and shared drives.
 </summary>
	<param name="path">String - Drive letter</param>
	<returns>The serial number for the drive alock is on, formatted as "xxxx-xxxx"</returns>
	<remarks>TODO: Decide what to to about shared folders and RAID arrays</remarks>
</member><member name="M:ActiveLock37Net.modHardware.GetHDSerial">
	<summary>
 Function to return the serial number for a hard drive. Currently works on local drives, mapped drives, and shared drives. Checks windir if it cant get a serial, then c:, then returns 0000-0000
 </summary>
	<returns>The serial number for the drive alock is on, formatted as "xxxx-xxxx"</returns>
	<remarks>I think that this is 99.999999897456284893% effective.</remarks>
</member><member name="M:ActiveLock37Net.modHardware.GetHDSerialFirmware">
	<summary>
 Function to return the HDD Firmware Serial Number (Actual Physical Serial Number)
 </summary>
	<returns>HDD Firmware Serial Number</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modHardware.StripControlChars(System.String@,System.Boolean@)">
	<summary>
 Strips all control characters (ASCII code &lt; 32)
 </summary>
	<param name="Source">String to be stripped off the control characters</param>
	<param name="KeepCRLF">If the second argument is True or omitted, CR-LF pairs are preserved</param>
	<returns>String stripped off the control characters</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modHardware.SmartGetVersion(System.Int32)">
	<summary>
 Given the SMART drive handle, gets the version
 </summary>
	<param name="hDrive">SMART drive handle</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modHardware.SwapBytes(System.Byte[]@)">
	<summary>
 Swaps byte arrays
 </summary>
	<param name="b">Input byte array</param>
	<returns>Swapped byte array</returns>
	<remarks>see code for more information</remarks>
</member><member name="M:ActiveLock37Net.modHardware.GetMACAddress">
	<summary>
 Retrieves the MAC Address for the network controller installed, returning a formatted string
 </summary>
	<returns>MAC address of the computer NIC</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modHardware.GetWindowsSerial">
	<summary>
 Gets the Windows Serial Number
 </summary>
	<returns>Windows serial number</returns>
	<remarks>.NET way of doing things added</remarks>
</member><member name="M:ActiveLock37Net.modHardware.GetBiosVersion">
	<summary>
 Gets the BIOS Serial Number
 </summary>
	<returns>BIOS serial number</returns>
	<remarks>Uses the WMI</remarks>
</member><member name="M:ActiveLock37Net.modHardware.GetMotherboardSerial">
	<summary>
 Gets the Motherboard Serial Number
 </summary>
	<returns>Motherboard serial number</returns>
	<remarks>Uses the WMI</remarks>
</member><member name="M:ActiveLock37Net.modHardware.GetIPaddress">
	<summary>
 Gets the IP address
 </summary>
	<returns>IP address</returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modHardware">
	<summary>
 Gets all the hardware signatures of the current machine
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.CCoder.gc_intPragCuloare">
	<summary>?Not Documented!</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.#ctor">
	<summary>?Not Documented!</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.Dispose">
	<summary>?Not Documented!</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.Code(System.Drawing.Bitmap,System.String)">
	<summary>?Not Documented!</summary>
	<param name="bmpPatern"></param>
	<param name="InputText"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.SetR(System.Int32@,System.Int32@,System.Drawing.Bitmap@,System.Drawing.Bitmap@,System.Int32@)">
	<summary>?Not Documented!</summary>
	<param name="i"></param>
	<param name="j"></param>
	<param name="bmpPatern"></param>
	<param name="bmpNew"></param>
	<param name="cr"></param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.SetG(System.Int32@,System.Int32@,System.Drawing.Bitmap@,System.Drawing.Bitmap@,System.Int32@)">
	<summary>?Not Documented!</summary>
	<param name="i"></param>
	<param name="j"></param>
	<param name="bmpPatern"></param>
	<param name="bmpNew"></param>
	<param name="cg"></param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.SetB(System.Int32@,System.Int32@,System.Drawing.Bitmap@,System.Drawing.Bitmap@,System.Int32@)">
	<summary>?Not Documented!</summary>
	<param name="i"></param>
	<param name="j"></param>
	<param name="bmpPatern"></param>
	<param name="bmpNew"></param>
	<param name="cb"></param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.Decode(System.String,System.String)">
	<summary>?Not Documented!</summary>
	<param name="strPaternFile"></param>
	<param name="strMessageFile"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.GetChar(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32@,System.Int32@)">
	<summary>?Not Documented!</summary>
	<param name="bmpPatern"></param>
	<param name="bmpMessage"></param>
	<param name="i"></param>
	<param name="j"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.GetR(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32@,System.Int32@)">
	<summary>?Not Documented!</summary>
	<param name="bmpPatern"></param>
	<param name="bmpMessage"></param>
	<param name="i"></param>
	<param name="j"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.GetG(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32@,System.Int32@)">
	<summary>?Not Documented!</summary>
	<param name="bmpPatern"></param>
	<param name="bmpMessage"></param>
	<param name="i"></param>
	<param name="j"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.GetB(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32@,System.Int32@)">
	<summary>?Not Documented!</summary>
	<param name="bmpPatern"></param>
	<param name="bmpMessage"></param>
	<param name="i"></param>
	<param name="j"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.ReadFile(System.String)">
	<summary>?Not Documented!</summary>
	<param name="strFileText"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.Code(System.String,System.String,System.String)">
	<summary>?Not Documented!</summary>
	<param name="strPaternFile"></param>
	<param name="strMessage"></param>
	<param name="strMessageFile"></param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CCoder.Decode(System.String,System.String,System.String@)">
	<summary>?Not Documented!</summary>
	<param name="strPaternFile"></param>
	<param name="strMessageFile"></param>
	<param name="strTextFile"></param>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.CCoder">
	<summary>?Not Documented!</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.GetPrivateProfileString(System.String,System.String,System.String,System.String,System.Int32,System.String)">
	<summary>
 Retrieves a string from the specified section in an initialization file.
 <para>
 Note  This function is provided only for compatibility with 16-bit
 Windows-based applications. Applications should store initialization
 information in the registry.
 </para>
	</summary>
	<param name="lpApplicationName">[in] The name of the section containing the key name. If this parameter is NULL, the GetPrivateProfileString function copies all section names in the file to the supplied buffer.</param>
	<param name="lpKeyName">[in] The name of the key whose associated string is to be retrieved. If this parameter is NULL, all key names in the section specified by the lpAppName parameter are copied to the buffer specified by the lpReturnedString parameter.</param>
	<param name="lpDefault">[in] A default string. If the lpKeyName key cannot be found in the initialization file, GetPrivateProfileString copies the default string to the lpReturnedString buffer. If this parameter is NULL, the default is an empty string, "". <para>Avoid specifying a default string with trailing blank characters. The function inserts a null character in the lpReturnedString buffer to strip any trailing blanks.</para></param>
	<param name="lpReturnedString">[out] A pointer to the buffer that receives the retrieved string.</param>
	<param name="nSize">[in] The size of the buffer pointed to by the lpReturnedString parameter, in characters.</param>
	<param name="lpFileName">[in] The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
	<returns>The return value is the number of characters copied to the buffer, not including the terminating null character.</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms724353(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.INIFile.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
	<summary>
 Copies a string into the specified section of an initialization file.
 <para>
 Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should store initialization information in the registry.
 </para>
	</summary>
	<param name="lpApplicationName">[in] The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.</param>
	<param name="lpKeyName">[in] The name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is NULL, the entire section, including all entries within the section, is deleted.</param>
	<param name="lpString">[in] A null-terminated string to be written to the file. If this parameter is NULL, the key pointed to by the lpKeyName parameter is deleted.</param>
	<param name="lpFileName">[in] The name of the initialization file.</param>
	<returns>If the function successfully copies the string to the initialization file, the return value is nonzero.</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms725501(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.INIFile.GetPrivateProfileSection(System.String,System.String,System.Int32,System.String)">
	<summary>
 Retrieves all the keys and values for the specified section of an initialization file.
 </summary>
	<param name="lpAppName">[in] The name of the section in the initialization file.</param>
	<param name="lpReturnedString">[out] A pointer to a buffer that receives the key name and value pairs associated with the named section. The buffer is filled with one or more null-terminated strings; the last string is followed by a second null character.</param>
	<param name="nSize">[in] The size of the buffer pointed to by the lpReturnedString parameter, in characters. The maximum profile section size is 32,767 characters.</param>
	<param name="lpFileName">[in] The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
	<returns>The return value specifies the number of characters copied to the buffer, not including the terminating null character. If the buffer is not large enough to contain all the key name and value pairs associated with the named section, the return value is equal to nSize minus two.</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms724348(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.INIFile.WritePrivateProfileSection(System.String,System.String,System.String)">
	<summary>
 Replaces the keys and values for the specified section in an initialization file.
 <para>
 Note:  This function is provided only for compatibility with 16-bit versions of Windows. Applications should store initialization information in the registry.
 </para>
	</summary>
	<param name="lpAppName">[in] The name of the section in which data is written. This section name is typically the name of the calling application.</param>
	<param name="lpString">[in] The new key names and associated values that are to be written to the named section. This string is limited to 65,535 bytes.</param>
	<param name="lpFileName">[in] The name of the initialization file. If this parameter does not contain a full path for the file, the function searches the Windows directory for the file. If the file does not exist and lpFileName does not contain a full path, the function creates the file in the Windows directory.<para>If the file exists and was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function creates a file using ANSI characters.</para></param>
	<returns>If the function succeeds, the return value is nonzero.</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms725500(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.INIFile.GetPrivateProfileSectionNames(System.String,System.Int32,System.String)">
	<summary>
 Retrieves the names of all sections in an initialization file.
 <para>
 Note  This function is provided only for compatibility with 16-bit Windows-based applications. Applications should store initialization information in the registry.
 </para>
	</summary>
	<param name="lpszReturnBuffer">[out] A pointer to a buffer that receives the section names associated with the named file. The buffer is filled with one or more null-terminated strings; the last string is followed by a second null character.</param>
	<param name="nSize">[in] The size of the buffer pointed to by the lpszReturnBuffer parameter, in characters.</param>
	<param name="lpFileName">The name of the initialization file. If this parameter is NULL, the function searches the Win.ini file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
	<returns>The return value specifies the number of characters copied to the specified buffer, not including the terminating null character. If the buffer is not large enough to contain all the section names associated with the specified initialization file, the return value is equal to the size specified by nSize minus two.</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/ms724352(VS.85).aspx for more information</remarks>
</member><member name="M:ActiveLock37Net.INIFile.GetValue(System.String,System.String,System.Boolean@)">
	<summary>
 Retrieves a value from the passed key (ValueName) and returns it as a variant
 (String subtype). This proc is useful if your requirements go above that of the
 Values Get/Let pair. You can specify a Default return value in case the call fails,
 and you can pass a Boolean variable in the Fail argument.
 </summary>
	<param name="ValueName">Passed key</param>
	<param name="Default_Renamed">Default return value to be used if the call fails</param>
	<param name="Failed">This will be set to False if everything went well, or True of
 something went wrong</param>
	<returns>This will be set to False if everything went well, or True of something went
 wrong, and the return is the value passed in the Default argument.</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.AddSection(System.String,System.Boolean@)">
	<summary>
 Adds an empty section to the current file. If you're wondering
 why this is here, know that I use it a lot, but I suppose it's
 of limited value in most cases.
 </summary>
	<param name="name">Section name to be added</param>
	<param name="SetAsCurrent">If True, sets the added section as the current section name</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.EnumSectionKeys(System.Object@)">
	<summary>
 Enumerates the keys (not the Key-Value pairs) under the current section,
 copies the array of keys into the ArrayResult argument, and returns the
 number of keys enumerated.
 <p>For how the class handles buffer sizes on INI calls, please see the Notes
 section on the [Declarations] section of the class module.</p>
		<p>If the method fails, the return will be zero, the ArrayResult argument
 will be set to Null and you will hit an assert.</p>
	</summary>
	<param name="ArrayResult">Returned array</param>
	<returns>Integer - Returns 0 if failure</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.EnumSectionValues(System.Object@)">
	<summary>
 This proc will enumerate just the values contained under a given section
 and will return them in an array.
 For how the class handles buffer sizes on INI calls, please see the Notes
 section on the [Declarations] section of the class module.
 If the method fails, the return will be zero, the ArrayResult argument
 will be set to Null and you will hit an assert.
 </summary>
	<param name="ArrayResult">Returned array</param>
	<returns>Integer - Returns 0 if failure</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.EnumSections(System.String[]@)">
	<summary>
 This proc will enumerate all the names of the sections of the current INI
 file and return them in an array.
 <p>For how the class handles buffer sizes on INI calls, please see the Notes
 section on the [Declarations] section of the class module.</p>
		<p>If the method fails, the return will be zero, the ArrayResult argument
 will be set to Null and you will hit an assert.</p>
	</summary>
	<param name="ArrayResult">Returned array</param>
	<returns>Integer - Returns 0 if failure</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.DeleteSection(System.String)">
	<summary>
 Deletes a section from the current INI file
 </summary>
	<param name="SectionName">Name of the section to be deleted</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.DeleteKey(System.String)">
	<summary>
 Deletes a key (a value pair) from the INI file
 </summary>
	<param name="KeyName">Name of the key to be deleted</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.EnumSectionValuePairs(System.Object@)">
	<summary>
 This proc will enumerate a given section's Key=Value and place them
 in the passed array as two different arrays. That is:
 <p>    Array(Array(Keys),Array(Values))</p>
		<p>For how the class handles buffer sizes on INI calls, please see the Notes
 section on the [Declarations] section of the class module.</p>
		<p>If the method fails, the return will be zero, the ArrayResult argument
 will be set to Null and you will hit an assert.</p>
	</summary>
	<param name="ArrayResult">Returned array</param>
	<returns>Integer - Returns 0 if failure</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.Flush">
	<summary>
 Flushes the INI file cache for the current file. <p>Note that
 the INI cache in Win32 (and Win16) is notoriously kranky. This flush
 is a logical one, not a physical flush. So if you need this type of
 thing seriously use the registry instead.</p>
	</summary>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.INIFile.Values(System.String)">
	<summary>
 Sets/Gets a value from a key as a variant (string subtype) from the current section.
 </summary>
	<param name="ValueName">Key name</param>
	<value></value>
	<returns>Variant - Key value</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.INIFile.File">
	<summary>
 Gets/Sets the current filename
 </summary>
	<value>String - File name used</value>
	<returns>String - Current file name</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.INIFile.Section">
	<summary>
 Gets/Sets the name of the current section
 </summary>
	<value>String - Current section name</value>
	<returns>String - Name of the current section</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIFile.WriteSection(System.Object)">
	<summary>
 Accepts a variant array and writes the contents to
 the current section. Note that this will overwrite
 all of the existing key-value pairs under that section.
 The array must be structured as follows:
 <p>    rValue(n) = "KeyName = Value"</p>
		<p>where n is a given index of the array. The "=" literal between the
 KeyName and Value *must* be present, or the call will fail.</p>
	</summary>
	<param name="rValue">variant array</param>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.INIFile">
	<summary>
 Stores and retrieves product keys
 <p>An "object-oriented" approach to using Windows INI files, with some
 useful additions.</p>
		<p>Klaus H. Probst [kprobst@vbbox.com]</p>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.DeleteRegKey(System.Int32@,System.String@)">
	<summary>
 Deletes a registry key
 </summary>
	<param name="lngKey">HKEY</param>
	<param name="SubKey">Sub key name</param>
	<returns>Return value from the RegDeleteKey function</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.DeleteRegValue(System.Int32@,System.String@,System.String@)">
	<summary>
 Deletes a registry value
 </summary>
	<param name="lngKey">HKEY</param>
	<param name="SubKey">Sub key name</param>
	<param name="ValueName">Value name</param>
	<returns>Return value from the RegDeleteValue function</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.WriteRegLong(System.Int32@,System.String@,System.String@,System.Int32@)">
	<summary>
 Writes a long key value in the registry
 </summary>
	<param name="lngKey">HKEY</param>
	<param name="SubKey">Sub key name</param>
	<param name="DataName">Value name</param>
	<param name="DataValue">Key value</param>
	<returns>Long</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.WriteStringValue(System.Int32@,System.String@,System.String@,System.String@)">
	<summary>
 Writes a string in the registry
 </summary>
	<param name="lngKey">HKEY</param>
	<param name="SubKey">Sub key name</param>
	<param name="DataName">Value name</param>
	<param name="DataValue">Key value</param>
	<returns>Long</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.ReadRegVal(System.Int32@,System.String@,System.String@,System.Object@)">
	<summary>
 Reads a key value from the registry
 </summary>
	<param name="lngKey">HKEY</param>
	<param name="SubKey">Sub key name</param>
	<param name="DataName">Value name</param>
	<param name="DefaultData">Default value to be returned</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.GetSubKeys(System.String@,System.String@,System.Int32@)">
	<summary>
 Gets subkeys from a given key separated by commas
 </summary>
	<param name="strKey">Key name</param>
	<param name="SubKey">Sub key name</param>
	<param name="SubKeyCnt">Number of keys</param>
	<returns>Sub key list of a given key (separated by commas)</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.StripNulls(System.String)">
	<summary>
 Strips nulls in a given string
 </summary>
	<param name="s">Input string</param>
	<returns>Returned string free of nulls</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.ParseString(System.String@,System.Int16@,System.String@)">
	<summary>
 String parser
 </summary>
	<param name="strIn">Input string</param>
	<param name="intLoc">Character location</param>
	<param name="strDelimiter">String delimiter</param>
	<returns>Parsed string</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.alSaveSetting(System.String@,System.String@,System.String@,System.String@,System.String@,System.Object@)">
	<summary>
 Saves a key in the registry. Calls the alSaveSettingReg sub.
 </summary>
	<param name="strRegHive"></param>
	<param name="strRegPath"></param>
	<param name="strAppname"></param>
	<param name="strSection"></param>
	<param name="strKey"></param>
	<param name="vData"></param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.alGetSetting(System.String@,System.String@,System.String@,System.String@,System.String@,System.Object@)">
	<summary>
 Reads a key value from the registry. Calls the alGetSettingReg function to get a registry value
 </summary>
	<param name="strRegHive">Base registry class</param>
	<param name="strRegPath">Registry key path under "Software"</param>
	<param name="strAppname">Application name</param>
	<param name="strSection">Section name</param>
	<param name="strKey">Key name</param>
	<param name="vDefault">Key value</param>
	<returns>Variant</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.alSaveSettingReg(System.String@,System.String@,System.String@,System.String@,System.String@,System.Object@)">
	<summary>
 Saves a key in the registry.
 </summary>
	<param name="strRegHive">Base registry class</param>
	<param name="strRegPath">Registry key path under "Software"</param>
	<param name="strAppname">Application name</param>
	<param name="strSection">Section name</param>
	<param name="strKey">Key name</param>
	<param name="vData">Key value</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.alGetSettingReg(System.String@,System.String@,System.String@,System.String@,System.String@,System.Object@)">
	<summary>
 Reads a key value from the registry
 </summary>
	<param name="strRegHive">Base registry class</param>
	<param name="strRegPath">Registry key path under "Software"</param>
	<param name="strAppname">Application name</param>
	<param name="strSection">Section name</param>
	<param name="strKey">Key name</param>
	<param name="vDefault">Key value</param>
	<returns>Variant - Return value from the ReadRegVal function</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.Savekey(System.Int32@,System.String@)">
	<summary>
 Saves a key in the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="strPath">Key Name</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.GetString(System.Int32@,System.String@,System.String@)">
	<summary>
 Gets a string from the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="strPath">Key Name</param>
	<param name="strValue">Value Name</param>
	<returns>The key as a string.</returns>
	<remarks>see code for an example.</remarks>
</member><member name="M:ActiveLock37Net.modRegistry.GetRegistryValue(System.Int32,System.String,System.String,System.Object@)">
	<summary>
 Gets a key value from the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="KeyName">Key Name</param>
	<param name="ValueName">Value Name</param>
	<param name="defaultValue">Variant - Default value to be returned if the value is missing</param>
	<returns>Variant - Registry value</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.SetRegistryValue(System.Int32,System.String,System.String,System.Object@)">
	<summary>
 Writes or Creates a Registry value
 </summary>
	<param name="hKey">HKEY</param>
	<param name="KeyName">Key Name</param>
	<param name="ValueName">Value Name</param>
	<param name="Value">Key Value.
 <para>Value can be an integer value (REG_DWORD), a string (REG_SZ) or an array of binary (REG_BINARY). Raises an error otherwise.</para></param>
	<returns>True if successful</returns>
	<remarks>Use KeyName = "" for the default value</remarks>
</member><member name="M:ActiveLock37Net.modRegistry.SaveString(System.Int32@,System.String@,System.String@,System.String@)">
	<summary>
 Saves a string in the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="strPath">Key Name</param>
	<param name="strValue">Value Name</param>
	<param name="strdata">Key Value</param>
	<returns>Variant - Returns "Success" if successful</returns>
	<remarks>see code for an example</remarks>
</member><member name="M:ActiveLock37Net.modRegistry.Getdword(System.Int32,System.String,System.String)">
	<summary>
 Gets the DWORD of a key from the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="strPath">Key Name</param>
	<param name="strValueName">Value Name</param>
	<returns>Variant - Returns the DWORD if successful</returns>
	<remarks>see code for an example</remarks>
</member><member name="M:ActiveLock37Net.modRegistry.SaveDword(System.Int32,System.String,System.String,System.Int32)">
	<summary>
 Saves a DWORD in the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="strPath">Key Name</param>
	<param name="strValueName">Value Name</param>
	<param name="lData">Key Value</param>
	<returns>Variant - Returns "Success" if successful</returns>
	<remarks>see code for an example</remarks>
</member><member name="M:ActiveLock37Net.modRegistry.DeleteKey(System.Int32,System.String)">
	<summary>
 Deletes a key in the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="strKey">Key Name</param>
	<returns>Variant - Returns "Success" if successful</returns>
	<remarks>see code for an example</remarks>
</member><member name="M:ActiveLock37Net.modRegistry.CheckRegistryKey(System.Int32,System.String)">
	<summary>
 Checks a given key in the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="KeyName">Key Name</param>
	<returns>True if the key exists</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.CreateRegistryKey(System.Int32,System.String)">
	<summary>
 Creates a key in the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="KeyName">Key Name</param>
	<returns>True if the key already exists, error if unable to create the key</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modRegistry.DeleteValue(System.Int32,System.String,System.String)">
	<summary>
 Deletes a key value in the registry
 </summary>
	<param name="hKey">HKEY</param>
	<param name="strPath">Key Name</param>
	<param name="strValue">Value Name</param>
	<returns>Variant - Returns "Success" if successful</returns>
	<remarks>see code for an example.</remarks>
</member><member name="T:ActiveLock37Net.modRegistry">
	<summary>
 Facilitates Windows registry access
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.ADSFile.GetFileSize(System.Int32,System.IntPtr)">
	<summary>
 Retrieves the size of the specified file, in bytes.
 </summary>
	<param name="handle">A handle to the file.</param>
	<param name="size">A pointer to the variable where the high-order doubleword of the file size is returned. This parameter can be NULL if the application does not require the high-order doubleword.</param>
	<returns>If the function succeeds, the return value is the low-order doubleword of the file size, and, if lpFileSizeHigh is non-NULL, the function puts the high-order doubleword of the file size into the variable pointed to by that parameter.</returns>
	<remarks>Note that if the return value is INVALID_FILE_SIZE (0xffffffff), an application must call GetLastError to determine whether the function has succeeded or failed. The reason the function may appear to fail when it has not is that lpFileSizeHigh could be non-NULL or the file size could be 0xffffffff. In this case, GetLastError will return NO_ERROR (0) upon success. Because of this behavior, it is recommended that you use GetFileSizeEx instead.</remarks>
</member><member name="M:ActiveLock37Net.ADSFile.ReadFile(System.Int32,System.Byte[],System.Int32,System.Int32@,System.IntPtr)">
	<summary>
		<para>Reads data from the specified file or input/output (I/O) device. Reads occur at the position specified by the file pointer if supported by the device.</para>
		<para>This function is designed for both synchronous and asynchronous operations. For a similar function designed solely for asynchronous operation, see <a href="http://msdn.microsoft.com/en-us/library/aa365468(VS.85).aspx">ReadFileEx</a>.</para>
	</summary>
	<param name="handle">A handle to the device (for example, a file, file stream, physical disk, volume, console buffer, tape drive, socket, communications resource, mailslot, or pipe).</param>
	<param name="buffer">A pointer to the buffer that receives the data read from a file or device.</param>
	<param name="byteToRead">The maximum number of bytes to be read.</param>
	<param name="bytesRead">A pointer to the variable that receives the number of bytes read when using a synchronous hFile parameter. ReadFile sets this value to zero before doing any work or error checking. Use NULL for this parameter if this is an asynchronous operation to avoid potentially erroneous results.</param>
	<param name="lpOverlapped">A pointer to an OVERLAPPED structure is required if the hFile parameter was opened with FILE_FLAG_OVERLAPPED, otherwise it can be NULL.</param>
	<returns>If the function succeeds, the return value is nonzero (TRUE).</returns>
	<remarks>see http://msdn.microsoft.com/en-us/library/aa365467(VS.85).aspx </remarks>
</member><member name="M:ActiveLock37Net.ADSFile.CreateFile(System.String,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
	<summary>
		<para>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe. The function returns a handle that can be used to access the file or device for various types of I/O depending on the file or device and the flags and attributes specified.</para>
		<para>To perform this operation as a transacted operation, which results in a handle that can be used for transacted I/O, use the <a href="http://msdn.microsoft.com/en-us/library/aa363859(VS.85).aspx">CreateFileTransacted</a> function.</para>
	</summary>
	<param name="filename">The name of the file or device to be created or opened. </param>
	<param name="desiredAccess">The requested access to the file or device, which can be summarized as read, write, both or neither (zero).</param>
	<param name="shareMode">The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none (refer to the following table). Access requests to attributes or extended attributes are not affected by this flag.</param>
	<param name="attributes">A pointer to a SECURITY_ATTRIBUTES structure that contains two separate but related data members: an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes.</param>
	<param name="creationDisposition">An action to take on a file or device that exists or does not exist.</param>
	<param name="flagsAndAttributes">The file or device attributes and flags, FILE_ATTRIBUTE_NORMAL being the most common default value for files.</param>
	<param name="templateFile">A valid handle to a template file with the GENERIC_READ access right. The template file supplies file attributes and extended attributes for the file that is being created.</param>
	<returns>
		<para>If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.</para>
		<para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call GetLastError.</para>
	</returns>
	<remarks>See http://msdn.microsoft.com/en-us/library/aa363858.aspx for full documentation!</remarks>
</member><member name="M:ActiveLock37Net.ADSFile.WriteFile(System.Int32,System.Byte[],System.Int32,System.Int32@,System.IntPtr)">
	<summary>
 Writes data to the specified file or input/output (I/O) device. Writes occur at the position specified by the file pointer, if the handle refers to a seeking device.
 </summary>
	<param name="hFile">A handle to the file or I/O device (for example, a file, file stream, physical disk, volume, console buffer, tape drive, socket, communications resource, mailslot, or pipe).</param>
	<param name="lpBuffer">A pointer to the buffer containing the data to be written to the file or device.</param>
	<param name="nNumberOfBytesToWrite">The number of bytes to be written to the file or device.</param>
	<param name="lpNumberOfBytesWritten">A pointer to the variable that receives the number of bytes written when using a synchronous hFile parameter. WriteFile sets this value to zero before doing any work or error checking. Use NULL for this parameter if this is an asynchronous operation to avoid potentially erroneous results.</param>
	<param name="lpOverlapped">A pointer to an <a href="http://msdn.microsoft.com/en-us/library/ms684342(VS.85).aspx">OVERLAPPED</a> structure is required if the hFile parameter was opened with FILE_FLAG_OVERLAPPED, otherwise this parameter can be NULL.</param>
	<returns>If the function succeeds, the return value is nonzero (TRUE).</returns>
	<remarks>See http://msdn.microsoft.com/en-us/library/aa365747(VS.85).aspx for full documentation!</remarks>
</member><member name="M:ActiveLock37Net.ADSFile.CloseHandle(System.Int32)">
	<summary>
 Closes an open object handle.
 </summary>
	<param name="hFile">A valid handle to an open object.</param>
	<returns>If the function succeeds, the return value is nonzero.</returns>
	<remarks>See http://msdn.microsoft.com/en-us/library/ms724211(VS.85).aspx for full Documentation!</remarks>
</member><member name="M:ActiveLock37Net.ADSFile.Read(System.String,System.String)">
	<summary>
 Method called when an alternate data stream must be read from.
 </summary>
	<param name="file">The fully qualified name of the file from which
 the ADS data will be read.</param>
	<param name="stream">The name of the stream within the "normal" file
 from which to read.</param>
	<returns>The contents of the file as a string.  It will always return
 at least a zero-length string, even if the file does not exist.
 </returns>
</member><member name="M:ActiveLock37Net.ADSFile.Write(System.String,System.String,System.String)">
	<summary>
 The static method to call when data must be written to a stream.
 </summary>
	<param name="data">The string data to embed in the stream in the file</param>
	<param name="file">The fully qualified name of the file with the
 stream into which the data will be written.</param>
	<param name="stream">The name of the stream within the normal file to
 write the data.</param>
	<returns>An unsigned integer of how many bytes were actually written.</returns>
</member><member name="M:ActiveLock37Net.ADSFile.ReadError(System.String,System.String)">
	<summary>
 Not Documented!
 </summary>
	<param name="FileName"></param>
	<param name="stream"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.ADSFile">
	<summary>
 Not Documented!
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrOK">
	<summary>
 No error. Operation was successful.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrNoLicense">
	<summary>
 No license available.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrLicenseInvalid">
	<summary>
 License is invalid.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrLicenseExpired">
	<summary>
 License has expired.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrLicenseTampered">
	<summary>
 License has been tampered.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrClockChanged">
	<summary>
 System clock has been changed.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrWrongIPaddress">
	<summary>
 Wrong IP Address.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrKeyStoreInvalid">
	<summary>
 Key Store Path (LIC file path) hasn't been specified.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrFileTampered">
	<summary>
 ActiveLock DLL file has been tampered.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrNotInitialized">
	<summary>
 ActiveLock has not been initialized yet.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrNotImplemented">
	<summary>
 An ActiveLock operation has not been implemented.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrUserNameTooLong">
	<summary>
 Maximum User Name length of 2000 characters has been exceeded.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrUserNameInvalid">
	<summary>
 Used User name does not match with the license key.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrInvalidTrialDays">
	<summary>
 Specified number of Free Trial Days is invalid (possibly &lt;=0).
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrInvalidTrialRuns">
	<summary>
 Specified number of Free Trial Runs is invalid (possibly &lt;=0).
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrTrialInvalid">
	<summary>
 Trial is invalid.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrTrialDaysExpired">
	<summary>
 Trial Days have expired.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrTrialRunsExpired">
	<summary>
 Trial Runs have expired.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrNoSoftwareName">
	<summary>
 Software Name has not been specified.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrNoSoftwareVersion">
	<summary>
 Software Version has not been specified.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrRSAError">
	<summary>
 Something went wrong in the RSA routines.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrKeyStorePathInvalid">
	<summary>
 Key Store Path (LIC file path) hasn't been specified.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrCryptoAPIError">
	<summary>
 Crypto API error in CryptoAPI class.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrNoSoftwarePassword">
	<summary>
 Software Password has not been specified.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrUndefinedSpecialFolder">
	<summary>
 The special folder used by Activelock is not defined or Virtual folder.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrDateError">
	<summary>
 There's an error in setting a date used by Activelock
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrInternetConnectionError">
	<summary>
 There's a problem with connecting to Internet.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.ActiveLockErrCodeConstants.alerrSoftwarePasswordInvalid">
	<summary>
 Password length&gt;255 or invalid characters.
 </summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.Globals.ActiveLockErrCodeConstants">
	<summary>
 These error codes are used for <code>Err.Number</code> whenever ActiveLock raises an error.
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.strCypherText">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.Globals.bCypherOn">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Globals.NewInstance">
	<summary>
 Obtains a new instance of an object that implements IActiveLock interface.
 <p>
 As of 2.0.5, this method will no longer initialize the instance automatically.
 Callers will have to call Init() by themselves subsequent to obtaining the instance.
 </p>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Globals.CreateProductLicense(System.String,System.String,System.String,ActiveLock37Net.ProductLicense.LicFlags,ActiveLock37Net.ProductLicense.ALLicType,System.String,System.String,System.DateTime,System.String,System.DateTime,System.String,System.Int16,System.String)">
	<summary>
 Instantiates a new ProductLicense object from the specified parameters.
 <p>If <code>LicType</code> is <i>Permanent</i>, then <code>Expiration</code> date parameter will be ignored.</p>
	</summary>
	<param name="Name">Product/Software Name</param>
	<param name="Ver">Product version</param>
	<param name="Code">Product/Software Code</param>
	<param name="Flags">License Flag</param>
	<param name="LicType">License type</param>
	<param name="Licensee">Registered party for which the license has been issued</param>
	<param name="RegisteredLevel">Registered level</param>
	<param name="Expiration">Expiration date</param>
	<param name="LicKey">License key</param>
	<param name="RegisteredDate">Date on which the product is registered</param>
	<param name="Hash1">Hash-1 code</param>
	<param name="MaxUsers">Maximum number of users allowed to use this license</param>
	<param name="LicCode"></param>
	<returns>License object</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Globals.GetClassString(ActiveLock37Net.ProductLicense.LicFlags@)">
	<summary>
 Gets the license flag string such as MultiUser or Single
 </summary>
	<param name="Flags">License flag string</param>
	<returns>License flag string</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Globals.GetLicTypeString(ActiveLock37Net.ProductLicense.ALLicType@)">
	<summary>
 Returns a string version of LicType
 </summary>
	<param name="LicType">License type object</param>
	<returns>License type, such as Period, Permanent, Timed Expiry or None</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.Globals.TrimNulls(System.String)">
	<summary>
 Removes Null characters from the string.
 </summary>
	<param name="str_Renamed">String to be trimmed.</param>
	<returns>Trimmed string.</returns>
	<remarks>str was upgraded to str_Renamed</remarks>
</member><member name="M:ActiveLock37Net.Globals.MD5Hash(System.String)">
	<summary>
 Computes an MD5 hash of the specified string.
 </summary>
	<param name="str_Renamed">String to be hashed.</param>
	<returns>Computed hash code.</returns>
	<remarks>str was upgraded to str_Renamed</remarks>
</member><member name="M:ActiveLock37Net.Globals.Base64Encode(System.String)">
	<summary>
 Encodes a base64-decoded string.
 </summary>
	<param name="str_Renamed">String to be encoded.</param>
	<returns>Encoded string.</returns>
	<remarks>str was upgraded to str_Renamed</remarks>
</member><member name="M:ActiveLock37Net.Globals.Base64Decode(System.String)">
	<summary>
 Decodes a base64-encoded string.
 </summary>
	<param name="strEncoded">String to be decoded.</param>
	<returns>Decoded string.</returns>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_CpuID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_BiosID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_DiskID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_BaseID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_VideoID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_MacID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_UseCpuID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_UseBiosID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_UseDiskID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_UseBaseID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_UseVideoID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_UseMacID">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_ReturnLength">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.FingerPrint.m_TotalLength">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="E:ActiveLock37Net.FingerPrint.StartingWith">
	<summary>
	</summary>
	<param name="Text"></param>
	<remarks></remarks>
</member><member name="E:ActiveLock37Net.FingerPrint.DoneWith">
	<summary>
	</summary>
	<param name="Text"></param>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FingerPrint.TotalLength">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FingerPrint.ReturnLength">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FingerPrint.UseCpuID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FingerPrint.UseBiosID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FingerPrint.UseDiskID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FingerPrint.UseBaseID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FingerPrint.UseVideoID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FingerPrint.UseMacID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.FingerPrint.Value">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FingerPrint.Identifier(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="wmiClass"></param>
	<param name="wmiProperty"></param>
	<param name="wmiMustBeTrue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FingerPrint.Identifier(System.String,System.String)">
	<summary>
	</summary>
	<param name="wmiClass"></param>
	<param name="wmiProperty"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FingerPrint.CpuID">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FingerPrint.BiosID">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FingerPrint.DiskID">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FingerPrint.BaseID">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FingerPrint.VideoID">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FingerPrint.MacID">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.FingerPrint.Pack(System.String)">
	<summary>
	</summary>
	<param name="Text"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.FingerPrint">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA1Add(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA1AND(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA1Mod32Add(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA1NOT(System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA1OR(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA1RotLeft(System.String,System.Int16)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="rots"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA1XOR(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA2Add(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA2AND(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA2Mod32Add(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA2NOT(System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA2OR(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA2RotLeft(System.String,System.Int16)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="rots"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.BigAA2XOR(System.String,System.String)">
	<summary>
 [INTERNAL] SHA function
 </summary>
	<param name="value1"></param>
	<param name="value2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.SHA1AA1Hash(System.String)">
	<summary>
 SHA Hash function
 </summary>
	<param name="hashthis">Input string to be hashed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modSHA1.SHA1AA2Hash(System.String)">
	<summary>
 SHA Hash function
 </summary>
	<param name="hashthis">Input string to be hashed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.modSHA1">
	<summary>
 SHA1 Encryption Module
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.CRC32.crc32Table">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.CRC32.BUFFER_SIZE">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CRC32.GetCrc32(System.IO.Stream@)">
	<summary>
	</summary>
	<param name="stream"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.CRC32.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.CRC32">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.INIGenerator.ActiveLockInterface">
	<summary>
 Returns IActiveLock interface
 </summary>
	<value></value>
	<returns>Returns IActiveLock interface</returns>
	<remarks></remarks>
</member><member name="P:ActiveLock37Net.INIGenerator.IALUGenerator_StoragePath">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIGenerator.Class_Initialize_Renamed">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIGenerator.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIGenerator.LoadProdInfo(System.String@,ActiveLock37Net.ProductInfo@)">
	<summary>
 Loads Product Info from the specified INI section.
 </summary>
	<param name="Section">String - Section Name that contains ProdName and ProdVer in order to be unique.</param>
	<param name="ProdInfo">ProductInfo - Object containing product information to be saved.</param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIGenerator.IALUGenerator_SaveProduct(ActiveLock37Net.ProductInfo@)">
	<summary>
 Saves product details in the store file
 </summary>
	<param name="ProdInfo">ProductInfo - Object containing product information to be saved.</param>
	<remarks>IALUGenerator Interface implementation</remarks>
</member><member name="M:ActiveLock37Net.INIGenerator.IALUGenerator_RetrieveProducts">
	<summary>
 Retrieves all product information from INI.
 </summary>
	<returns>Product info object</returns>
	<remarks>Returns as an array.</remarks>
</member><member name="M:ActiveLock37Net.INIGenerator.IALUGenerator_RetrieveProduct(System.String,System.String)">
	<summary>
 Retrieves product VCode and GCode from the store file
 </summary>
	<param name="Name">String - Product name</param>
	<param name="Ver">String - Product version</param>
	<returns></returns>
	<remarks>todo Error Handling - Need to return Nothing if store file doesn't contain the product</remarks>
</member><member name="M:ActiveLock37Net.INIGenerator.IALUGenerator_DeleteProduct(System.String,System.String)">
	<summary>
 Removes the license keys section from a INI file, i.e. deletes product details in the license database
 </summary>
	<param name="name">Product name</param>
	<param name="Ver">Product version</param>
	<remarks>Removes a section from the INI file</remarks>
</member><member name="M:ActiveLock37Net.INIGenerator.IALUGenerator_GenKey(ActiveLock37Net.ProductLicense@,System.String,System.String)">
	<summary>
 Given the Installation Code, generates an Activelock license liberation key.
 </summary>
	<param name="Lic">Product license</param>
	<param name="InstCode">Installation Code sent by the user</param>
	<param name="RegisteredLevel">Registration Level for the license. Default is "0"</param>
	<returns>String - Liberation key for the license</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.INIGenerator.GetLockAndUserFromInstallCode(System.String,System.String@,System.String@)">
	<summary>
 Retrieves lock string and user info from the request string
 </summary>
	<param name="strReq">strLock combined with user name.</param>
	<param name="strLock">Generated request code to Lock</param>
	<param name="strUser">User name</param>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.INIGenerator">
	<summary>
 This is a concrete implementation of the IALUGenerator interface.
 </summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modMD5.Hash(System.String@)">
	<summary>
 MD5 Hash function
 </summary>
	<param name="strMessage">String to be hashed</param>
	<returns>Hashed string</returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.modMD5.ComputeHash(System.String@)">
	<summary>
 MD5 Hash function
 </summary>
	<param name="strMessage">String to be hashed</param>
	<returns>Hashed string</returns>
	<remarks>This function is primarily used by the Short Key Function to hash strings; it matches the hash generated in the VB6 version therefore both .NET and VB6 versions generate the same serial number and key</remarks>
</member><member name="T:ActiveLock37Net.modMD5">
	<summary>
 MD5 Hashing Module
 </summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.EncryptionRoutines.bKey">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.EncryptionRoutines.bIV">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.EncryptionRoutines.bInitialised">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.EncryptionRoutines.rijM">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.EncryptionRoutines.headerString">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.EncryptionRoutines.headerBytes">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:ActiveLock37Net.EncryptionRoutines.bCancel">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="E:ActiveLock37Net.EncryptionRoutines.Progress">
	<summary>
	</summary>
	<param name="prog"></param>
	<remarks></remarks>
</member><member name="E:ActiveLock37Net.EncryptionRoutines.Finished">
	<summary>
	</summary>
	<param name="retType"></param>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.EncryptionRoutines.ReturnType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.EncryptionRoutines.GenerateHash(System.String)">
	<summary>
	</summary>
	<param name="strSource"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.EncryptionRoutines.Initialise(System.String)">
	<summary>
	</summary>
	<param name="sPWH"></param>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.EncryptionRoutines.CancelTransform">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.EncryptionRoutines.TransformFile(System.String,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="sInFile"></param>
	<param name="sOutFile"></param>
	<param name="encrypt"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.EncryptionRoutines.ConvertStringToBytes(System.String)">
	<summary>
	</summary>
	<param name="sString"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ActiveLock37Net.EncryptionRoutines.ConvertBytesToString(System.Byte[])">
	<summary>
	</summary>
	<param name="bytes"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ActiveLock37Net.EncryptionRoutines">
	<summary>
	</summary>
	<remarks></remarks>
</member>
</members>
</doc>